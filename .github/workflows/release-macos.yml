name: Release macos version
on: 
  push:
    branches: "quarkus-release/**"
jobs:
  build-macos-kafka:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2     
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17' # for a specific JDK 17; or '17' for the latest JDK 17
          distribution: 'graalvm'
      - name: Get release number
        id: get-id
        run: |
          id=$(echo ${{github.ref_name}} | cut -d/ -f2)
          echo "::set-output name=id::$id"
      - name: Get build number
        id: get-build-id
        run: |
          cd BrokerParent
          id=$(mvn help:evaluate -Dexpression="project.version" -q -DforceStdout)
          echo "::set-output name=id::$id"
      - name: build-macos-with-kafka
        run: |
          find . -name "pom.xml" -exec sed -i '' 's/${{steps.get-id.outputs.id}}-SNAPSHOT/${{steps.get-id.outputs.id}}/g' {} +
          mvn clean package -DskipTests -Dkafka -Pkafka -Dnative -Dquarkus.native.container-build=false-Dquarkus.profile=kafka
      - name: Create Release ${{steps.get-id.outputs.id}}-macos-kafka
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          tag_name: ${{steps.get-id.outputs.id}}-macos-kafka
          release_name: ${{steps.get-id.outputs.id}}-macos-kafka
          draft: false
          prerelease: false
          body_path: RELEASENOTES
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: AllInOneRunner/target/all-in-one-runner-${{steps.get-id.outputs.id}}-runner
          asset_name: scorpio-all-in-one-runner-${{steps.get-id.outputs.id}}-macos-kafka
          asset_content_type: application/octet-stream
      - name: Upload Release at-context-server
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./at-context-server/target/at-context-server-${{steps.get-id.outputs.id}}-runner
          asset_name: at-context-server-macos-kafka-${{steps.get-id.outputs.id}}-macos-kafka
          asset_content_type: application/octet-stream
      - name: Upload Release history-query-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./HistoryQueryManager/target/history-query-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: history-query-manager-macos-kafka-${{steps.get-id.outputs.id}}-macos-kafka
          asset_content_type: application/octet-stream
      - name: Upload Release history-entity-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./HistoryEntityManager/target/history-entity-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: history-entity-manager-macos-kafka-${{steps.get-id.outputs.id}}-macos-kafka
          asset_content_type: application/octet-stream
      - name: Upload Release registry-subscription-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./RegistrySubscriptionManager/target/registry-subscription-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: registry-subscription-manager-macos-kafka-${{steps.get-id.outputs.id}}-macos-kafka
          asset_content_type: application/octet-stream
      - name: Upload Release registry-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./RegistryManager/target/registry-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: registry-manager-macos-kafka-${{steps.get-id.outputs.id}}-macos-kafka
          asset_content_type: application/octet-stream
      - name: Upload Release subscription-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./SubscriptionManager/target/subscription-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: subscription-manager-macos-kafka-${{steps.get-id.outputs.id}}-macos-kafka
          asset_content_type: application/octet-stream
      - name: Upload Release query-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./QueryManager/target/query-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: query-manager-macos-kafka-${{steps.get-id.outputs.id}}-macos-kafka
          asset_content_type: application/octet-stream
      - name: Upload Release entity-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./EntityManager/target/entity-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: entity-manager-macos-kafka-${{steps.get-id.outputs.id}}-macos-kafka
          asset_content_type: application/octet-stream
  build-macos-sqs:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2     
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17' # for a specific JDK 17; or '17' for the latest JDK 17
          distribution: 'graalvm'
      - name: Get release number
        id: get-id
        run: |
          id=$(echo ${{github.ref_name}} | cut -d/ -f2)
          echo "::set-output name=id::$id"
      - name: Get build number
        id: get-build-id
        run: |
          cd BrokerParent
          id=$(mvn help:evaluate -Dexpression="project.version" -q -DforceStdout)
          echo "::set-output name=id::$id"
      - name: build-macos-with-sqs
        run: |
          find . -name "pom.xml" -exec sed -i '' 's/${{steps.get-id.outputs.id}}-SNAPSHOT/${{steps.get-id.outputs.id}}/g' {} +
          mvn clean package -DskipTests -Dsqs -Psqs -Dnative -Dquarkus.native.container-build=false-Dquarkus.profile=sqs
      - name: Create Release ${{steps.get-id.outputs.id}}-macos-sqs
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          tag_name: ${{steps.get-id.outputs.id}}-macos-sqs
          release_name: ${{steps.get-id.outputs.id}}-macos-sqs
          draft: false
          prerelease: false
          body_path: RELEASENOTES
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: AllInOneRunner/target/all-in-one-runner-${{steps.get-id.outputs.id}}-runner
          asset_name: scorpio-all-in-one-runner-${{steps.get-id.outputs.id}}-macos-sqs
          asset_content_type: application/octet-stream
      - name: Upload Release at-context-server
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./at-context-server/target/at-context-server-${{steps.get-id.outputs.id}}-runner
          asset_name: at-context-server-macos-sqs-${{steps.get-id.outputs.id}}-macos-sqs
          asset_content_type: application/octet-stream
      - name: Upload Release history-query-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./HistoryQueryManager/target/history-query-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: history-query-manager-macos-sqs-${{steps.get-id.outputs.id}}-macos-sqs
          asset_content_type: application/octet-stream
      - name: Upload Release history-entity-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./HistoryEntityManager/target/history-entity-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: history-entity-manager-macos-sqs-${{steps.get-id.outputs.id}}-macos-sqs
          asset_content_type: application/octet-stream
      - name: Upload Release registry-subscription-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./RegistrySubscriptionManager/target/registry-subscription-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: registry-subscription-manager-macos-sqs-${{steps.get-id.outputs.id}}-macos-sqs
          asset_content_type: application/octet-stream
      - name: Upload Release registry-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./RegistryManager/target/registry-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: registry-manager-macos-sqs-${{steps.get-id.outputs.id}}-macos-sqs
          asset_content_type: application/octet-stream
      - name: Upload Release subscription-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./SubscriptionManager/target/subscription-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: subscription-manager-macos-sqs-${{steps.get-id.outputs.id}}-macos-sqs
          asset_content_type: application/octet-stream
      - name: Upload Release query-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./QueryManager/target/query-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: query-manager-macos-sqs-${{steps.get-id.outputs.id}}-macos-sqs
          asset_content_type: application/octet-stream
      - name: Upload Release entity-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./EntityManager/target/entity-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: entity-manager-macos-sqs-${{steps.get-id.outputs.id}}-macos-sqs
          asset_content_type: application/octet-stream
  build-macos-mqtt:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2     
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17' # for a specific JDK 17; or '17' for the latest JDK 17
          distribution: 'graalvm'
      - name: Get release number
        id: get-id
        run: |
          id=$(echo ${{github.ref_name}} | cut -d/ -f2)
          echo "::set-output name=id::$id"
      - name: Get build number
        id: get-build-id
        run: |
          cd BrokerParent
          id=$(mvn help:evaluate -Dexpression="project.version" -q -DforceStdout)
          echo "::set-output name=id::$id"
      - name: build-macos-with-mqtt
        run: |
          find . -name "pom.xml" -exec sed -i '' 's/${{steps.get-id.outputs.id}}-SNAPSHOT/${{steps.get-id.outputs.id}}/g' {} +
          mvn clean package -DskipTests -Dmqtt -Pmqtt -Dnative -Dquarkus.native.container-build=false-Dquarkus.profile=mqtt
      - name: Create Release ${{steps.get-id.outputs.id}}-macos-mqtt
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          tag_name: ${{steps.get-id.outputs.id}}-macos-mqtt
          release_name: ${{steps.get-id.outputs.id}}-macos-mqtt
          draft: false
          prerelease: false
          body_path: RELEASENOTES
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: AllInOneRunner/target/all-in-one-runner-${{steps.get-id.outputs.id}}-runner
          asset_name: scorpio-all-in-one-runner-${{steps.get-id.outputs.id}}-macos-mqtt
          asset_content_type: application/octet-stream
      - name: Upload Release at-context-server
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./at-context-server/target/at-context-server-${{steps.get-id.outputs.id}}-runner
          asset_name: at-context-server-macos-mqtt-${{steps.get-id.outputs.id}}-macos-mqtt
          asset_content_type: application/octet-stream
      - name: Upload Release history-query-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./HistoryQueryManager/target/history-query-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: history-query-manager-macos-mqtt-${{steps.get-id.outputs.id}}-macos-mqtt
          asset_content_type: application/octet-stream
      - name: Upload Release history-entity-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./HistoryEntityManager/target/history-entity-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: history-entity-manager-macos-mqtt-${{steps.get-id.outputs.id}}-macos-mqtt
          asset_content_type: application/octet-stream
      - name: Upload Release registry-subscription-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./RegistrySubscriptionManager/target/registry-subscription-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: registry-subscription-manager-macos-mqtt-${{steps.get-id.outputs.id}}-macos-mqtt
          asset_content_type: application/octet-stream
      - name: Upload Release registry-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./RegistryManager/target/registry-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: registry-manager-macos-mqtt-${{steps.get-id.outputs.id}}-macos-mqtt
          asset_content_type: application/octet-stream
      - name: Upload Release subscription-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./SubscriptionManager/target/subscription-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: subscription-manager-macos-mqtt-${{steps.get-id.outputs.id}}-macos-mqtt
          asset_content_type: application/octet-stream
      - name: Upload Release query-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./QueryManager/target/query-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: query-manager-macos-mqtt-${{steps.get-id.outputs.id}}-macos-mqtt
          asset_content_type: application/octet-stream
      - name: Upload Release entity-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./EntityManager/target/entity-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: entity-manager-macos-mqtt-${{steps.get-id.outputs.id}}-macos-mqtt
          asset_content_type: application/octet-stream
  build-macos-rabbitmq:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2     
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17' # for a specific JDK 17; or '17' for the latest JDK 17
          distribution: 'graalvm'
      - name: Get release number
        id: get-id
        run: |
          id=$(echo ${{github.ref_name}} | cut -d/ -f2)
          echo "::set-output name=id::$id"
      - name: Get build number
        id: get-build-id
        run: |
          cd BrokerParent
          id=$(mvn help:evaluate -Dexpression="project.version" -q -DforceStdout)
          echo "::set-output name=id::$id"
      - name: build-macos-with-rabbitmq
        run: |
          find . -name "pom.xml" -exec sed -i '' 's/${{steps.get-id.outputs.id}}-SNAPSHOT/${{steps.get-id.outputs.id}}/g' {} +
          mvn clean package -DskipTests -Drabbitmq -Prabbitmq -Dnative -Dquarkus.native.container-build=false-Dquarkus.profile=rabbitmq
      - name: Create Release ${{steps.get-id.outputs.id}}-macos-rabbitmq
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          tag_name: ${{steps.get-id.outputs.id}}-macos-rabbitmq
          release_name: ${{steps.get-id.outputs.id}}-macos-rabbitmq
          draft: false
          prerelease: false
          body_path: RELEASENOTES
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: AllInOneRunner/target/all-in-one-runner-${{steps.get-id.outputs.id}}-runner
          asset_name: scorpio-all-in-one-runner-${{steps.get-id.outputs.id}}-macos-rabbitmq
          asset_content_type: application/octet-stream
      - name: Upload Release at-context-server
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./at-context-server/target/at-context-server-${{steps.get-id.outputs.id}}-runner
          asset_name: at-context-server-macos-rabbitmq-${{steps.get-id.outputs.id}}-macos-rabbitmq
          asset_content_type: application/octet-stream
      - name: Upload Release history-query-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./HistoryQueryManager/target/history-query-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: history-query-manager-macos-rabbitmq-${{steps.get-id.outputs.id}}-macos-rabbitmq
          asset_content_type: application/octet-stream
      - name: Upload Release history-entity-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./HistoryEntityManager/target/history-entity-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: history-entity-manager-macos-rabbitmq-${{steps.get-id.outputs.id}}-macos-rabbitmq
          asset_content_type: application/octet-stream
      - name: Upload Release registry-subscription-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./RegistrySubscriptionManager/target/registry-subscription-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: registry-subscription-manager-macos-rabbitmq-${{steps.get-id.outputs.id}}-macos-rabbitmq
          asset_content_type: application/octet-stream
      - name: Upload Release registry-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./RegistryManager/target/registry-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: registry-manager-macos-rabbitmq-${{steps.get-id.outputs.id}}-macos-rabbitmq
          asset_content_type: application/octet-stream
      - name: Upload Release subscription-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./SubscriptionManager/target/subscription-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: subscription-manager-macos-rabbitmq-${{steps.get-id.outputs.id}}-macos-rabbitmq
          asset_content_type: application/octet-stream
      - name: Upload Release query-manager 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./QueryManager/target/query-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: query-manager-macos-rabbitmq-${{steps.get-id.outputs.id}}-macos-rabbitmq
          asset_content_type: application/octet-stream
      - name: Upload Release entity-manager
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./EntityManager/target/entity-manager-${{steps.get-id.outputs.id}}-runner
          asset_name: entity-manager-macos-rabbitmq-${{steps.get-id.outputs.id}}-macos-rabbitmq
          asset_content_type: application/octet-stream
  build-macos-aaio:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2     
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17' # for a specific JDK 17; or '17' for the latest JDK 17
          distribution: 'graalvm'
      - name: Get release number
        id: get-id
        run: |
          id=$(echo ${{github.ref_name}} | cut -d/ -f2)
          echo "::set-output name=id::$id"
      - name: Get build number
        id: get-build-id
        run: |
          cd BrokerParent
          id=$(mvn help:evaluate -Dexpression="project.version" -q -DforceStdout)
          echo "::set-output name=id::$id"
      - name: build-macos
        run: |
          find . -name "pom.xml" -exec sed -i '' 's/${{steps.get-id.outputs.id}}-SNAPSHOT/${{steps.get-id.outputs.id}}/g' {} +
          mvn clean package -DskipTests -Din-memory -Pin-memory -Dnative -Dquarkus.native.container-build=false-Dquarkus.profile=in-memory
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          tag_name: ${{steps.get-id.outputs.id}}-macos
          release_name: ${{steps.get-id.outputs.id}}-macos
          draft: false
          prerelease: false
          body_path: RELEASENOTES
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SUPER_SECRET }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: AllInOneRunner/target/all-in-one-runner-${{steps.get-id.outputs.id}}-runner
          asset_name: scorpio-all-in-one-runner-${{steps.get-id.outputs.id}}-macos
          asset_content_type: application/octet-stream
