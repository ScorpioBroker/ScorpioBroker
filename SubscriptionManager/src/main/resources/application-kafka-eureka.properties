#Eureka settings
quarkus.eureka.enable=true
#quarkus.eureka.port= <your application port, it should match with quarkus.http.port. If it does not exist,it takes quarkus.http.port>
#quarkus.eureka.hostname= <your application address. By default the host where the application has started up>
#quarkus.eureka.context-path= <your application context path, using the default one ${quarkus.http.root-path:/}>
#quarkus.eureka.prefer-ip-address= <whether or not to override hostname with the application LAN IP address. By default this is set to false>
#quarkus.eureka.name= <name of your application in Eureka. It takes quarkus.application.name if it does not exist>
#quarkus.eureka.vip-address= <how your application is recognised by clients>
quarkus.eureka.home-page-url=/
quarkus.eureka.status-page-url=/q/health/ready
quarkus.eureka.health-check-url=/q/health/live
quarkus.eureka.region=default
quarkus.eureka.prefer-same-zone=true
quarkus.eureka.service-url.default=http://localhost:8761/eureka
mysettings.kafka.bootstrap.host=${bushost:localhost}
mysettings.kafka.bootstrap.port=${busport:9092}
bootstrap.servers=${mysettings.kafka.bootstrap.host}:${mysettings.kafka.bootstrap.port}
#Kafka settings
kafka.bootstrap.servers=${bootstrap.servers}
#readability block###########
mp.messaging.incoming.entityretrieve.connector=smallrye-kafka
mp.messaging.incoming.entityretrieve.topic=${scorpio.topics.entity}
mp.messaging.incoming.entityretrieve.auto.offset.reset=latest
mp.messaging.incoming.entityretrieve.broadcast=true
#mp.messaging.incoming.entityretrieve.value.deserializer=eu.neclab.ngsildbroker.commons.serialization.messaging.BaseRequestDeserializer
#readability block###########
mp.messaging.outgoing.isubs.topic=${scorpio.topics.internalregsub}
mp.messaging.outgoing.isubs.connector=smallrye-kafka
#mp.messaging.outgoing.isubs.value.serializer=eu.neclab.ngsildbroker.commons.serialization.messaging.SubscriptionRequestSerializer
#readability block###########
mp.messaging.incoming.inotificationretrieve.connector=smallrye-kafka
mp.messaging.incoming.inotificationretrieve.topic=${scorpio.topics.internalnotification}
mp.messaging.incoming.inotificationretrieve.auto.offset.reset=latest
#mp.messaging.incoming.inotificationretrieve.value.deserializer=eu.neclab.ngsildbroker.commons.serialization.messaging.InternalNotificationDeserializer
#readability block###########
mp.messaging.outgoing.subalive.connector=smallrye-kafka
mp.messaging.outgoing.subalive.topic=${scorpio.topics.subalive}
#mp.messaging.outgoing.subalive.value.serializer=eu.neclab.ngsildbroker.commons.serialization.messaging.AliveAnnouncementSerializer
mp.messaging.incoming.subaliveretrieve.connector=smallrye-kafka
mp.messaging.incoming.subaliveretrieve.topic=${scorpio.topics.subalive}
mp.messaging.incoming.subaliveretrieve.auto.offset.reset=latest
#mp.messaging.incoming.subaliveretrieve.value.deserializer=eu.neclab.ngsildbroker.commons.serialization.messaging.AliveAnnouncementDeserializer
#readability block###########
mp.messaging.outgoing.subsync.connector=smallrye-kafka
mp.messaging.outgoing.subsync.topic=${scorpio.topics.subsync}
#mp.messaging.outgoing.subsync.value.serializer=eu.neclab.ngsildbroker.commons.serialization.messaging.SyncMessageSerializer
mp.messaging.incoming.subsyncretrieve.connector=smallrye-kafka
mp.messaging.incoming.subsyncretrieve.topic=${scorpio.topics.subsync}
mp.messaging.incoming.subsyncretrieve.auto.offset.reset=latest
#mp.messaging.incoming.subsyncretrieve.value.deserializer=eu.neclab.ngsildbroker.commons.serialization.messaging.SyncMessageDeserializer