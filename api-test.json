{
	"info": {
		"_postman_id": "d3cc50d6-e547-48b3-9897-6ba4c20f71d9",
		"name": "API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Function tests",
			"item": [
				{
					"name": "No Tenant",
					"item": [
						{
							"name": "/entities",
							"item": [
								{
									"name": "Entity Create Tests",
									"item": [
										{
											"name": "Entity No Context",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Created Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + expected);\r",
																	"    console.log(\"Received: \" + jsonData);\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Entity Context In Body",
											"item": [
												{
													"name": "Create Simple Entity With @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[\"@context\"][0]);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Created Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"Received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Entity Context in Link",
											"item": [
												{
													"name": "Create Simple Entity With @context in link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"link\", pm.request.headers.get(\"Link\"));\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Created Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"var expectedLink = pm.collectionVariables.get(\"link\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});\r",
																	"pm.test(\"Validate Link header\", function () {\r",
																	"    var headers = pm.response.headers.all();\r",
																	"    var links = []\r",
																	"    headers.forEach(function(itm, idx){\r",
																	"        if(itm.key == \"Link\"){\r",
																	"            links.push(itm.value);\r",
																	"        }\r",
																	"    });\r",
																	"    console.log(\"expected Link: \" + expectedLink);\r",
																	"    console.log(\"received Links: \" + links);\r",
																	"    pm.expect(links).to.include(expectedLink);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Entity Update Tests",
									"item": [
										{
											"name": "Update Complete Entity with no context",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update all fields of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststringupdated\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123456},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456789},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values updated\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1:updated\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"updated\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Partial Update Entity with no context",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update string test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var entityId = pm.collectionVariables.get(\"entityId\");\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"stringproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": \"teststringupdated\"}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/stringproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"stringproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate String Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update int test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var entityId = pm.collectionVariables.get(\"entityId\");\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"intproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": 1234567}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/intproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"intproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Int Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update float test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var entityId = pm.collectionVariables.get(\"entityId\");\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"floatproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": 1234567.89}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/floatproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"floatproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Float Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update complexproperty test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var entityId = pm.collectionVariables.get(\"entityId\");\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"complexproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values updated\"}}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/complexproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"complexproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and ValidateComplex Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update relationship test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var entityId = pm.collectionVariables.get(\"entityId\");\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"testrelationship\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Relationship\", \"object\": \"urn:testref1:updated\"}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/testrelationship",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"testrelationship"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Relationship Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Update Complete Entity with context in body",
											"item": [
												{
													"name": "Create Simple Entity With @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[\"@context\"][0]);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update all fields of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststringupdated\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123456},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456789},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values updated\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1:updated\"},\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"updated\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"Received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Partial Update Entity with context in body",
											"item": [
												{
													"name": "Create Simple Entity With @context in body",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[\"@context\"]);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n    \"@context\": \"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update string test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody[\"stringproperty\"]);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"stringproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststringupdated\"},\r\n    \"@context\": \"{{@context}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate String Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update int test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody[\"intproperty\"]);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"intproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"intproperty\":{\"type\": \"Property\", \"value\": 1234567},\r\n    \"@context\": \"{{@context}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Int Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update float test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody[\"floatproperty\"]);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"floatproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"floatproperty\": {\"type\": \"Property\", \"value\": 1234567.89},\r\n    \"@context\": \"{{@context}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Float Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update complexproperty test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody[\"complexproperty\"]);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"complexproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"complexproperty\":{\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values updated\"}}},\r\n    \"@context\": \"{{@context}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and ValidateComplex Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update relationship test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody[\"testrelationship\"]);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"testrelationship\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"testrelationship\":{\"type\": \"Relationship\", \"object\": \"urn:testref1:updated\"},\r\n    \"@context\": \"{{@context}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Relationship Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Update Complete Entity with context in Link",
											"item": [
												{
													"name": "Create Simple Entity With @context in link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"link\", pm.request.headers.get(\"Link\"));\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update all fields of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststringupdated\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123456},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456789},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values updated\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1:updated\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"updated\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Partial Update Entity with context in Link",
											"item": [
												{
													"name": "Create Simple Entity With @context in link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"link\", pm.request.headers.get(\"Link\"));\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update string test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"stringproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": \"teststringupdated\"}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/stringproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"stringproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate String Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update int test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"intproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": 1234567}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/intproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"intproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Int Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update float test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"floatproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": 1234567.89}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/floatproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"floatproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Float Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update complexproperty test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"complexproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values updated\"}}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/complexproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"complexproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and ValidateComplex Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update relationship test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"testrelationship\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Relationship\", \"object\": \"urn:testref1:updated\"}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/testrelationship",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"testrelationship"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Relationship Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Entity Append Tests",
									"item": [
										{
											"name": "Append new property to entity no context",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Append new field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedKey\", \"newtestproperty\")\r",
																	"pm.collectionVariables.set(\"updatedValue\", payloadBody[\"newtestproperty\"]);\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"newtestproperty\": {\"type\": \"Relationship\", \"object\": \"urn:testref1:updated\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"var addedKey = pm.collectionVariables.get(\"updatedKey\");\r",
																	"var addedValue = pm.collectionVariables.get(\"updatedValue\");\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[addedKey]).to.eql(addedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Change existing property with append no context",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update field with append",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedKey\", \"stringproperty\")\r",
																	"pm.collectionVariables.set(\"updatedValue\", payloadBody[\"stringproperty\"]);\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"updated\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"var addedKey = pm.collectionVariables.get(\"updatedKey\");\r",
																	"var addedValue = pm.collectionVariables.get(\"updatedValue\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[addedKey]).to.eql(addedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Append new relationship to entity no context",
											"item": []
										},
										{
											"name": "Change existing relationship with append no context",
											"item": []
										}
									]
								},
								{
									"name": "Entity Delete Tests",
									"item": [
										{
											"name": "Delete Entity",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Validate deletion of entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete Attribute",
											"item": []
										}
									]
								},
								{
									"name": "Query Tests",
									"item": [
										{
											"name": "Query for Type",
											"item": [
												{
													"name": "Create Simple Entity to be found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																	"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity to be not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity2\",\r\n    \"type\": \"TestType2\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query for entity type tbf",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(1);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																	"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "{{entityTypeTBF}}"
																},
																{
																	"key": "",
																	"value": "",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity TBF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityIdTBF}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity TBNF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityIdTBNF}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Query for Type and Id",
											"item": [
												{
													"name": "Create Simple Entity to be found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																	"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity to be not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity2\",\r\n    \"type\": \"TestType2\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query for entity type and id tbf",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(1);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																	"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&id={{entityIdTBF}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "{{entityTypeTBF}}"
																},
																{
																	"key": "id",
																	"value": "{{entityIdTBF}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity TBF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityIdTBF}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity TBNF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityIdTBNF}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Query for Type and IdPattern",
											"item": [
												{
													"name": "Create Simple Entity to be found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																	"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity to be not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity2\",\r\n    \"type\": \"TestType2\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query for entity type and id tbf",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(1);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																	"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&idPattern=urn:test*",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "{{entityTypeTBF}}"
																},
																{
																	"key": "idPattern",
																	"value": "urn:test*"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity TBF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityIdTBF}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity TBNF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityIdTBNF}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Query for Type with Q Filter",
											"item": [
												{
													"name": "Property regex",
													"item": []
												},
												{
													"name": "Relationship regex",
													"item": []
												},
												{
													"name": "Property equal",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring1\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 1123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 1123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"differentvalues\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref2\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for string",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=stringproperty==\"teststring\"",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "stringproperty==\"teststring\""
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for int",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=intproperty==123",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "intproperty==123"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for float",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=floatproperty==123.456",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "floatproperty==123.456"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Relationship equal",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring1\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 1123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 1123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"differentvalues\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref2\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for relationship",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=testrelationship==urn:testref1",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "testrelationship==urn:testref1"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Property smaller than",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring1\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 1123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 1123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"differentvalues\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref2\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for int",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=intproperty<223",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "intproperty<223"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for float",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=floatproperty<223.456",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "floatproperty<223.456"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Property smaller equal than",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring1\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 1123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 1123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"differentvalues\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref2\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for int",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=intproperty<=123",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "intproperty<=123"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for float",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=floatproperty<=223.456",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "floatproperty<=223.456"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Property greater than",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring1\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 1123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 1123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"differentvalues\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref2\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for int",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=intproperty>223",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "intproperty>223"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for float",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=floatproperty>223.456",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "floatproperty>223.456"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Property greater equal than",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring1\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 1123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 1123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"differentvalues\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref2\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for int",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=intproperty>=223",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "intproperty>=223"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for float",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=floatproperty>=223.456",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "floatproperty>=223.456"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Query for Type with GeoQuery",
											"item": [
												{
													"name": "Near",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"urn:ngsi-ld:test3\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [80, 80.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"urn:ngsi-ld:test4\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [50, 50.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for entity tbf",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&geoproperty=location&georel=near;maxDistance==1500&geometry=Point&coordinates=[80,80]",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "geoproperty",
																			"value": "location"
																		},
																		{
																			"key": "georel",
																			"value": "near;maxDistance==1500"
																		},
																		{
																			"key": "geometry",
																			"value": "Point"
																		},
																		{
																			"key": "coordinates",
																			"value": "[80,80]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Within",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"urn:ngsi-ld:test3\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [80, 80.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"urn:ngsi-ld:test4\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [50, 50.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for entity tbf",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[79,79],[81,79],[81,81],[79,81],[79,79]]]",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "geoproperty",
																			"value": "location"
																		},
																		{
																			"key": "georel",
																			"value": "within"
																		},
																		{
																			"key": "geometry",
																			"value": "Polygon"
																		},
																		{
																			"key": "coordinates",
																			"value": "[[[79,79],[81,79],[81,81],[79,81],[79,79]]]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Equal",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"urn:ngsi-ld:test3\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [80, 80.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"urn:ngsi-ld:test4\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [50, 50.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for entity tbf",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&geoproperty=location&georel=equals&geometry=Point&coordinates=[80,80.0005]",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "geoproperty",
																			"value": "location"
																		},
																		{
																			"key": "georel",
																			"value": "equals"
																		},
																		{
																			"key": "geometry",
																			"value": "Point"
																		},
																		{
																			"key": "coordinates",
																			"value": "[80,80.0005]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Contains",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"urn:ngsi-ld:test3\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Polygon\", \r\n        \t\"coordinates\": [[[79,79],[81,79],[81,81],[79,81],[79,79]]]\r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"urn:ngsi-ld:test4\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Polygon\", \r\n        \t\"coordinates\": [[[49,49],[51,49],[51,51],[49,51],[49,49]]]\r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for entity tbf",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&geoproperty=location&georel=contains&geometry=Point&coordinates=[80,80.0005]",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "geoproperty",
																			"value": "location"
																		},
																		{
																			"key": "georel",
																			"value": "contains"
																		},
																		{
																			"key": "geometry",
																			"value": "Point"
																		},
																		{
																			"key": "coordinates",
																			"value": "[80,80.0005]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Intersects",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"urn:ngsi-ld:test3\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Polygon\", \r\n        \t\"coordinates\": [[[79,79],[81,79],[81,81],[79,81],[79,79]]]\r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"urn:ngsi-ld:test4\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Polygon\", \r\n        \t\"coordinates\": [[[49,49],[51,49],[51,51],[49,51],[49,49]]]\r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for entity tbf",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&geoproperty=location&georel=intersects&geometry=Polygon&coordinates=[[[79,79],[81,79],[81,81],[79,81],[79,79]]]",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "geoproperty",
																			"value": "location"
																		},
																		{
																			"key": "georel",
																			"value": "intersects"
																		},
																		{
																			"key": "geometry",
																			"value": "Polygon"
																		},
																		{
																			"key": "coordinates",
																			"value": "[[[79,79],[81,79],[81,81],[79,81],[79,79]]]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Disjoint",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"urn:ngsi-ld:test3\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Polygon\", \r\n        \t\"coordinates\": [[[79,79],[81,79],[81,81],[79,81],[79,79]]]\r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"urn:ngsi-ld:test4\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Polygon\", \r\n        \t\"coordinates\": [[[49,49],[51,49],[51,51],[49,51],[49,49]]]\r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for entity tbf",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&geoproperty=location&georel=disjoint&geometry=Polygon&coordinates=[[[49,49],[51,49],[51,51],[49,51],[49,49]]]",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "geoproperty",
																			"value": "location"
																		},
																		{
																			"key": "georel",
																			"value": "disjoint"
																		},
																		{
																			"key": "geometry",
																			"value": "Polygon"
																		},
																		{
																			"key": "coordinates",
																			"value": "[[[49,49],[51,49],[51,51],[49,51],[49,49]]]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Query with scopes",
											"item": [
												{
													"name": "Create Simple Entity single 4 level scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created4level\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId4level\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"scope\": \"/abc/def/ghi/jkl\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity single 4 level scope not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created4levelnotfound\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId4levelnotfound\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"scope\": \"/nmo/pqr/stu/vwx\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity single 2 level scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created2level\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId2level\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity3\",\r\n    \"type\": \"TestType\",\r\n    \"scope\": \"/abc/def\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity single 2 level scope not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created2levelnotfound\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId2levelnotfound\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity4\",\r\n    \"type\": \"TestType\",\r\n    \"scope\": \"/nmo/pqr\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity single 1 level scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created1level\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1level\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity5\",\r\n    \"type\": \"TestType\",\r\n    \"scope\": \"/abc\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity single 1 level scope not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created1levelnotfound\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1levelnotfound\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity6\",\r\n    \"type\": \"TestType\",\r\n    \"scope\": \"/nmo\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity multi scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdmulti\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityIdmulti\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity7\",\r\n    \"type\": \"TestType\",\r\n    \"scope\": [\"/abc/def/ghi/jkl\",\"/nmo/pqr/stu/vwx\"],\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query scope hash test first level",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(4);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"created4level\"));\r",
																	"    pm.expect(jsonData[1]).to.eql(pm.collectionVariables.get(\"created2level\"));\r",
																	"    pm.expect(jsonData[2]).to.eql(pm.collectionVariables.get(\"created1level\"));\r",
																	"    pm.expect(jsonData[3]).to.eql(pm.collectionVariables.get(\"createdmulti\"));\r",
																	"    \r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type=TestType&scopeQ=/abc/%23",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "TestType"
																},
																{
																	"key": "scopeQ",
																	"value": "/abc/%23"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Query scope hash test second level",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(3);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"created4level\"));\r",
																	"    pm.expect(jsonData[1]).to.eql(pm.collectionVariables.get(\"created2level\"));\r",
																	"    pm.expect(jsonData[2]).to.eql(pm.collectionVariables.get(\"createdmulti\"));\r",
																	"    \r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type=TestType&scopeQ=/abc/def/%23",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "TestType"
																},
																{
																	"key": "scopeQ",
																	"value": "/abc/def/%23"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Query scope plus test second level",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(2);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"created4level\"));\r",
																	"    pm.expect(jsonData[1]).to.eql(pm.collectionVariables.get(\"createdmulti\"));\r",
																	"    \r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type=TestType&scopeQ=/abc/def/%2B/jkl",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "TestType"
																},
																{
																	"key": "scopeQ",
																	"value": "/abc/def/%2B/jkl"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Query scope test or 2 levels",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(2);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"created2level\"));\r",
																	"    pm.expect(jsonData[1]).to.eql(pm.collectionVariables.get(\"created2levelnotfound\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type=TestType&scopeQ=/abc/def%7C/nmo/pqr",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "TestType"
																},
																{
																	"key": "scopeQ",
																	"value": "/abc/def%7C/nmo/pqr"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Query scope test and 4 levels",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(1);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdmulti\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type=TestType&scopeQ=/abc/def/ghi/jkl%3B/nmo/pqr/stu/vwx",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "TestType"
																},
																{
																	"key": "scopeQ",
																	"value": "/abc/def/ghi/jkl%3B/nmo/pqr/stu/vwx"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Query scope test or hash and plus",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(4);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdmulti\"));\r",
																	"    pm.expect(jsonData[1]).to.eql(pm.collectionVariables.get(\"created4levelnotfound\"));\r",
																	"    pm.expect(jsonData[2]).to.eql(pm.collectionVariables.get(\"created2levelnotfound\"));\r",
																	"    pm.expect(jsonData[3]).to.eql(pm.collectionVariables.get(\"created4level\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type=TestType&scopeQ=/abc/def/%2B/jkl%7C/nmo/pqr/%23",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "TestType"
																},
																{
																	"key": "scopeQ",
																	"value": "/abc/def/%2B/jkl%7C/nmo/pqr/%23"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity 4 level",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId4level}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId4level}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity 4 level not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId4levelnotfound}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId4levelnotfound}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity 2 level",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId2level}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId2level}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity 2 level not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId2levelnotfound}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId2levelnotfound}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity 1 level not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId1levelnotfound}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId1levelnotfound}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity 1 level",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId1level}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId1level}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity multi",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdmulti}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityIdmulti}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "/subscriptions",
							"item": [
								{
									"name": "Subscriptions Create Tests",
									"item": [
										{
											"name": "no @context",
											"item": [
												{
													"name": "Create Subscription with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test2\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>90\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															],
															"query": [
																{
																	"key": "",
																	"value": null,
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete subscription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in body",
											"item": [
												{
													"name": "Create Subscription with @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[\"@context\"][0]);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test2\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>90\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    },\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															],
															"query": [
																{
																	"key": "",
																	"value": null,
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete subscription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in Link",
											"item": [
												{
													"name": "Create Subscription with @context in link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.collectionVariables.set(\"link\", pm.request.headers.get(\"Link\"));\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test2\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>90\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"var expectedLink = pm.collectionVariables.get(\"link\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});\r",
																	"pm.test(\"Validate Link header\", function () {\r",
																	"    var headers = pm.response.headers.all();\r",
																	"    var links = []\r",
																	"    headers.forEach(function(itm, idx){\r",
																	"        if(itm.key == \"Link\"){\r",
																	"            links.push(itm.value);\r",
																	"        }\r",
																	"    });\r",
																	"    console.log(\"expected Link: \" + expectedLink);\r",
																	"    console.log(\"received Links: \" + links);\r",
																	"    pm.expect(links).to.include(expectedLink);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete subscription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Subscriptions Update Tests",
									"item": [
										{
											"name": "no @context",
											"item": [
												{
													"name": "Create Subscription with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test2\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>90\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															],
															"query": [
																{
																	"key": "",
																	"value": null,
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Subscription with no @context Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test3\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>100\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate update",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"updated\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															],
															"query": [
																{
																	"key": "",
																	"value": null,
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete subscription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in body",
											"item": [
												{
													"name": "Create Subscription with @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[\"@context\"][0]);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test2\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>90\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    },\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															],
															"query": [
																{
																	"key": "",
																	"value": null,
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Subscription with @context in body Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test3\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>100\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    },\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"updated\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															],
															"query": [
																{
																	"key": "",
																	"value": null,
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete subscription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in Link",
											"item": [
												{
													"name": "Create Subscription with @context in link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.collectionVariables.set(\"link\", pm.request.headers.get(\"Link\"));\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test2\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>90\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"var expectedLink = pm.collectionVariables.get(\"link\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});\r",
																	"pm.test(\"Validate Link header\", function () {\r",
																	"    var headers = pm.response.headers.all();\r",
																	"    var links = []\r",
																	"    headers.forEach(function(itm, idx){\r",
																	"        if(itm.key == \"Link\"){\r",
																	"            links.push(itm.value);\r",
																	"        }\r",
																	"    });\r",
																	"    console.log(\"expected Link: \" + expectedLink);\r",
																	"    console.log(\"received Links: \" + links);\r",
																	"    pm.expect(links).to.include(expectedLink);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Subscription with @context in link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test3\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>100\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate update",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedLink = pm.collectionVariables.get(\"link\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});\r",
																	"pm.test(\"Validate Link header\", function () {\r",
																	"    var headers = pm.response.headers.all();\r",
																	"    var links = []\r",
																	"    headers.forEach(function(itm, idx){\r",
																	"        if(itm.key == \"Link\"){\r",
																	"            links.push(itm.value);\r",
																	"        }\r",
																	"    });\r",
																	"    console.log(\"expected Link: \" + expectedLink);\r",
																	"    console.log(\"received Links: \" + links);\r",
																	"    pm.expect(links).to.include(expectedLink);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete subscription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Subscriptions Delete Tests",
									"item": []
								},
								{
									"name": "Subscriptions Trigger Tests",
									"item": [
										{
											"name": "Trigger Type Subscription",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:mytest1\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"            var value = response.json();\r",
																	"            console.log(\"Retrieving notifications from testserver\")\r",
																	"            console.log(notificationServer + \"/\" + subId)\r",
																	"            console.log(value);\r",
																	"            pm.expect(value.length).to.eql(1);\r",
																	"            notification = value[0].body;\r",
																	"            headers = value[0].headers;\r",
																	"            pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"            pm.expect(notification).to.have.property(\"id\");\r",
																	"            pm.expect(notification.data.length).to.eql(1);\r",
																	"            var notificationData = notification.data[0];\r",
																	"            delete notificationData[\"createdAt\"];\r",
																	"            delete notificationData[\"modifiedAt\"];\r",
																	"            console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																	"            console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"            pm.expect(notificationData).to.eql(payloadBody);\r",
																	"            });\r",
																	"        });\r",
																	"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type IdPattern Subscription",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:mytest1888\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\",\r\n            \"idPattern\": \".*\"\r\n   \t\t},\r\n           {\r\n\t\t\t\"type\": \"TestType2\",\r\n            \"idPattern\": \"myprefix.*\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context No Trigger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"            var value = response.json();\r",
																	"            console.log(\"Retrieving notifications from testserver\")\r",
																	"            console.log(notificationServer + \"/\" + subId)\r",
																	"            console.log(value);\r",
																	"            pm.expect(value.length).to.eql(0);\r",
																	"            });\r",
																	"        });\r",
																	"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"test:testentity1\",\r\n    \"type\": \"TestType2\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context Trigger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"            var value = response.json();\r",
																	"            console.log(\"Retrieving notifications from testserver\")\r",
																	"            console.log(notificationServer + \"/\" + subId)\r",
																	"            console.log(value);\r",
																	"            pm.expect(value.length).to.eql(1);\r",
																	"            notification = value[0].body;\r",
																	"            headers = value[0].headers;\r",
																	"            pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"            pm.expect(notification).to.have.property(\"id\");\r",
																	"            pm.expect(notification.data.length).to.eql(1);\r",
																	"            var notificationData = notification.data[0];\r",
																	"            delete notificationData[\"createdAt\"];\r",
																	"            delete notificationData[\"modifiedAt\"];\r",
																	"            console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																	"            console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"            pm.expect(notificationData).to.eql(payloadBody);\r",
																	"            });\r",
																	"        });\r",
																	"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"myprefixurn:test:testentity2\",\r\n    \"type\": \"TestType2\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/myprefixurn:test:testentity2",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"myprefixurn:test:testentity2"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/test:testentity1",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"test:testentity1"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type Subscription with batch upsert",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:mytest61\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(1);\r",
																	"                notification = value[0].body;\r",
																	"                headers = value[0].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(21);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 21; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity1\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity2\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity3\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity4\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity5\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity6\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity7\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity8\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity9\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity10\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity12\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity13\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity14\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity15\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity16\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity17\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity18\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity19\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity20\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity21\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/upsert",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"upsert"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"urn:test:testentity0\",\r\n    \"urn:test:testentity1\",\r\n    \"urn:test:testentity2\",\r\n    \"urn:test:testentity3\",\r\n    \"urn:test:testentity4\",\r\n    \"urn:test:testentity5\",\r\n    \"urn:test:testentity6\",\r\n    \"urn:test:testentity7\",\r\n    \"urn:test:testentity8\",\r\n    \"urn:test:testentity9\",\r\n    \"urn:test:testentity10\",\r\n    \"urn:test:testentity12\",\r\n    \"urn:test:testentity13\",\r\n    \"urn:test:testentity14\",\r\n    \"urn:test:testentity15\",\r\n    \"urn:test:testentity16\",\r\n    \"urn:test:testentity17\",\r\n    \"urn:test:testentity18\",\r\n    \"urn:test:testentity19\",\r\n    \"urn:test:testentity20\",\r\n    \"urn:test:testentity21\"\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type Subscription with batch upsert with a error in it",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:mytest61errorinit\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 207\", function () {\r",
																	"    pm.response.to.have.status(207);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(1);\r",
																	"                notification = value[0].body;\r",
																	"                headers = value[0].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(19);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 19; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i+2]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"WrongType\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity1\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"WrongType\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity2\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity3\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity4\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity5\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity6\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity7\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity8\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity9\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity10\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity12\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity13\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity14\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity15\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity16\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity17\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity18\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity19\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity20\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity21\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/upsert",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"upsert"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"urn:test:testentity2\",\r\n    \"urn:test:testentity3\",\r\n    \"urn:test:testentity4\",\r\n    \"urn:test:testentity5\",\r\n    \"urn:test:testentity6\",\r\n    \"urn:test:testentity7\",\r\n    \"urn:test:testentity8\",\r\n    \"urn:test:testentity9\",\r\n    \"urn:test:testentity10\",\r\n    \"urn:test:testentity12\",\r\n    \"urn:test:testentity13\",\r\n    \"urn:test:testentity14\",\r\n    \"urn:test:testentity15\",\r\n    \"urn:test:testentity16\",\r\n    \"urn:test:testentity17\",\r\n    \"urn:test:testentity18\",\r\n    \"urn:test:testentity19\",\r\n    \"urn:test:testentity20\",\r\n    \"urn:test:testentity21\"\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type Subscription with batch create and patch",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:mytest32\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(1);\r",
																	"                notification = value[0].body;\r",
																	"                headers = value[0].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(21);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 21; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity1\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity2\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity3\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity4\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity5\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity6\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity7\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity8\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity9\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity10\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity12\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity13\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity14\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity15\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity16\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity17\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity18\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity19\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity20\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity21\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update batch",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(2);\r",
																	"                notification = value[1].body;\r",
																	"                headers = value[1].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(21);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 21; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity1\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity2\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity3\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity4\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity5\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity6\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity7\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity8\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity9\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity10\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity12\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity13\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity14\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity15\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity16\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity17\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity18\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity19\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity20\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity21\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/update",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"update"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"urn:test:testentity0\",\r\n    \"urn:test:testentity1\",\r\n    \"urn:test:testentity2\",\r\n    \"urn:test:testentity3\",\r\n    \"urn:test:testentity4\",\r\n    \"urn:test:testentity5\",\r\n    \"urn:test:testentity6\",\r\n    \"urn:test:testentity7\",\r\n    \"urn:test:testentity8\",\r\n    \"urn:test:testentity9\",\r\n    \"urn:test:testentity10\",\r\n    \"urn:test:testentity12\",\r\n    \"urn:test:testentity13\",\r\n    \"urn:test:testentity14\",\r\n    \"urn:test:testentity15\",\r\n    \"urn:test:testentity16\",\r\n    \"urn:test:testentity17\",\r\n    \"urn:test:testentity18\",\r\n    \"urn:test:testentity19\",\r\n    \"urn:test:testentity20\",\r\n    \"urn:test:testentity21\"\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type Subscription with create HUGE entities and entity list",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:mytesthuge\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(1);\r",
																	"                notification = value[0].body;\r",
																	"                headers = value[0].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(21);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 21; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 4000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity1\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity2\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity3\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity4\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity5\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity6\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity7\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity8\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity9\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity10\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity12\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity13\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity14\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity15\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity16\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity17\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity18\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity19\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity20\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity21\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"urn:test:testentity0\",\r\n    \"urn:test:testentity1\",\r\n    \"urn:test:testentity2\",\r\n    \"urn:test:testentity3\",\r\n    \"urn:test:testentity4\",\r\n    \"urn:test:testentity5\",\r\n    \"urn:test:testentity6\",\r\n    \"urn:test:testentity7\",\r\n    \"urn:test:testentity8\",\r\n    \"urn:test:testentity9\",\r\n    \"urn:test:testentity10\",\r\n    \"urn:test:testentity12\",\r\n    \"urn:test:testentity13\",\r\n    \"urn:test:testentity14\",\r\n    \"urn:test:testentity15\",\r\n    \"urn:test:testentity16\",\r\n    \"urn:test:testentity17\",\r\n    \"urn:test:testentity18\",\r\n    \"urn:test:testentity19\",\r\n    \"urn:test:testentity20\",\r\n    \"urn:test:testentity21\"\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type Subscription with create HUGE entities and huge entity list",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:mytesthugehuge\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"ccoc.mon.docker.container\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(1);\r",
																	"                notification = value[0].body;\r",
																	"                headers = value[0].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(30);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 21; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[{\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:1\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:2\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:3\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:4\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:5\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:6\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:7\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:8\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:9\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:10\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:11\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:12\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:13\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:14\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:15\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:16\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:17\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:18\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:19\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:20\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:21\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:22\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:23\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:24\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:25\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:26\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:27\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:28\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:29\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"urn:ngsi-ld:Mon.Container:30\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/upsert",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"upsert"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"urn:ngsi-ld:Mon.Container:1\",\r\n    \"urn:ngsi-ld:Mon.Container:2\",\r\n    \"urn:ngsi-ld:Mon.Container:3\",\r\n    \"urn:ngsi-ld:Mon.Container:4\",\r\n    \"urn:ngsi-ld:Mon.Container:5\",\r\n    \"urn:ngsi-ld:Mon.Container:6\",\r\n    \"urn:ngsi-ld:Mon.Container:7\",\r\n    \"urn:ngsi-ld:Mon.Container:8\",\r\n    \"urn:ngsi-ld:Mon.Container:9\",\r\n    \"urn:ngsi-ld:Mon.Container:10\",\r\n    \"urn:ngsi-ld:Mon.Container:11\",\r\n    \"urn:ngsi-ld:Mon.Container:12\",\r\n    \"urn:ngsi-ld:Mon.Container:13\",\r\n    \"urn:ngsi-ld:Mon.Container:14\",\r\n    \"urn:ngsi-ld:Mon.Container:15\",\r\n    \"urn:ngsi-ld:Mon.Container:16\",\r\n    \"urn:ngsi-ld:Mon.Container:17\",\r\n    \"urn:ngsi-ld:Mon.Container:18\",\r\n    \"urn:ngsi-ld:Mon.Container:19\",\r\n    \"urn:ngsi-ld:Mon.Container:20\",\r\n    \"urn:ngsi-ld:Mon.Container:21\",\r\n    \"urn:ngsi-ld:Mon.Container:22\",\r\n    \"urn:ngsi-ld:Mon.Container:23\",\r\n    \"urn:ngsi-ld:Mon.Container:24\",\r\n    \"urn:ngsi-ld:Mon.Container:25\",\r\n    \"urn:ngsi-ld:Mon.Container:26\",\r\n    \"urn:ngsi-ld:Mon.Container:27\",\r\n    \"urn:ngsi-ld:Mon.Container:28\",\r\n    \"urn:ngsi-ld:Mon.Container:29\",\r\n    \"urn:ngsi-ld:Mon.Container:30\"\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type Subscription with batch create",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:mytest33\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(1);\r",
																	"                notification = value[0].body;\r",
																	"                headers = value[0].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(21);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 21; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity1\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity2\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity3\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity4\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity5\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity6\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity7\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity8\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity9\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity10\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity12\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity13\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity14\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity15\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity16\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity17\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity18\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity19\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity20\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity21\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"urn:test:testentity0\",\r\n    \"urn:test:testentity1\",\r\n    \"urn:test:testentity2\",\r\n    \"urn:test:testentity3\",\r\n    \"urn:test:testentity4\",\r\n    \"urn:test:testentity5\",\r\n    \"urn:test:testentity6\",\r\n    \"urn:test:testentity7\",\r\n    \"urn:test:testentity8\",\r\n    \"urn:test:testentity9\",\r\n    \"urn:test:testentity10\",\r\n    \"urn:test:testentity12\",\r\n    \"urn:test:testentity13\",\r\n    \"urn:test:testentity14\",\r\n    \"urn:test:testentity15\",\r\n    \"urn:test:testentity16\",\r\n    \"urn:test:testentity17\",\r\n    \"urn:test:testentity18\",\r\n    \"urn:test:testentity19\",\r\n    \"urn:test:testentity20\",\r\n    \"urn:test:testentity21\"\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type Subscription with batch create partial fail",
											"item": [
												{
													"name": "Create Duplicate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:mytestfailtest1\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 207\", function () {\r",
																	"    pm.response.to.have.status(207);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(1);\r",
																	"                notification = value[0].body;\r",
																	"                headers = value[0].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(20);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 20; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i+1]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity1\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity2\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity3\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity4\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity5\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity6\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity7\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity8\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity9\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity10\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity12\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity13\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity14\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity15\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity16\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity17\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity18\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity19\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity20\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"urn:test:testentity21\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"urn:test:testentity0\",\r\n    \"urn:test:testentity1\",\r\n    \"urn:test:testentity2\",\r\n    \"urn:test:testentity3\",\r\n    \"urn:test:testentity4\",\r\n    \"urn:test:testentity5\",\r\n    \"urn:test:testentity6\",\r\n    \"urn:test:testentity7\",\r\n    \"urn:test:testentity8\",\r\n    \"urn:test:testentity9\",\r\n    \"urn:test:testentity10\",\r\n    \"urn:test:testentity12\",\r\n    \"urn:test:testentity13\",\r\n    \"urn:test:testentity14\",\r\n    \"urn:test:testentity15\",\r\n    \"urn:test:testentity16\",\r\n    \"urn:test:testentity17\",\r\n    \"urn:test:testentity18\",\r\n    \"urn:test:testentity19\",\r\n    \"urn:test:testentity20\",\r\n    \"urn:test:testentity21\"\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Q Subscription",
											"item": [
												{
													"name": "Equal Property",
													"item": [
														{
															"name": "Create Subscription With Id No Context",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"var subId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"subId\", subId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:mytest2\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"stringproperty==\\\"trigger\\\"\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
																},
																"url": {
																	"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
																	"host": [
																		"{{subscription-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"subscriptions"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity Trigger Notification",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"entityId\", entityId);\r",
																			"var subId = pm.collectionVariables.get(\"subId\");\r",
																			"\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"setTimeout(function(){\r",
																			"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																			"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																			"            pm.test(\"Check for notification\", function () {\r",
																			"            var value = response.json();\r",
																			"            console.log(\"Retrieving notifications from testserver\")\r",
																			"            console.log(notificationServer + \"/\" + subId)\r",
																			"            console.log(value);\r",
																			"            pm.expect(value.length).to.eql(1);\r",
																			"            notification = value[0].body;\r",
																			"            headers = value[0].headers;\r",
																			"            pm.expect(notification.type).to.eql(\"Notification\");\r",
																			"            pm.expect(notification).to.have.property(\"id\");\r",
																			"            pm.expect(notification.data.length).to.eql(1);\r",
																			"            var notificationData = notification.data[0];\r",
																			"            delete notificationData[\"createdAt\"];\r",
																			"            delete notificationData[\"modifiedAt\"];\r",
																			"            console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																			"            console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																			"            pm.expect(notificationData).to.eql(payloadBody);\r",
																			"            });\r",
																			"        });\r",
																			"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																			"}, 3000);\r",
																			"    \r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"trigger\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity No Trigger",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"entityId\", entityId);\r",
																			"var subId = pm.collectionVariables.get(\"subId\");\r",
																			"\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"setTimeout(function(){\r",
																			"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																			"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																			"            pm.test(\"Check for notification\", function () {\r",
																			"            var value = response.json();\r",
																			"            console.log(\"Retrieving notifications from testserver\")\r",
																			"            console.log(notificationServer + \"/\" + subId)\r",
																			"            console.log(value);\r",
																			"            pm.expect(value.length).to.eql(1);\r",
																			"            });\r",
																			"        });\r",
																			"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																			"}, 3000);\r",
																			"    \r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity No Trigger",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Subcription",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
																	"host": [
																		"{{subscription-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"subscriptions",
																		"{{subId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Equal Relationship",
													"item": [
														{
															"name": "Create Subscription With Id No Context",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"var subId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"subId\", subId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:mytest3\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"testref==urn:mytest1\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
																},
																"url": {
																	"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
																	"host": [
																		"{{subscription-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"subscriptions"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity Trigger Notification",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"entityId\", entityId);\r",
																			"var subId = pm.collectionVariables.get(\"subId\");\r",
																			"\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"setTimeout(function(){\r",
																			"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																			"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																			"            pm.test(\"Check for notification\", function () {\r",
																			"            var value = response.json();\r",
																			"            console.log(\"Retrieving notifications from testserver\")\r",
																			"            console.log(notificationServer + \"/\" + subId)\r",
																			"            console.log(value);\r",
																			"            pm.expect(value.length).to.eql(1);\r",
																			"            notification = value[0].body;\r",
																			"            headers = value[0].headers;\r",
																			"            pm.expect(notification.type).to.eql(\"Notification\");\r",
																			"            pm.expect(notification).to.have.property(\"id\");\r",
																			"            pm.expect(notification.data.length).to.eql(1);\r",
																			"            var notificationData = notification.data[0];\r",
																			"            delete notificationData[\"createdAt\"];\r",
																			"            delete notificationData[\"modifiedAt\"];\r",
																			"            console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																			"            console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																			"            pm.expect(notificationData).to.eql(payloadBody);\r",
																			"            });\r",
																			"        });\r",
																			"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																			"}, 3000);\r",
																			"    \r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"trigger\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testref\": {\"type\": \"Relationship\", \"object\": \"urn:mytest1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity No Trigger",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"entityId\", entityId);\r",
																			"var subId = pm.collectionVariables.get(\"subId\");\r",
																			"\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"setTimeout(function(){\r",
																			"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																			"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																			"            pm.test(\"Check for notification\", function () {\r",
																			"            var value = response.json();\r",
																			"            console.log(\"Retrieving notifications from testserver\")\r",
																			"            console.log(notificationServer + \"/\" + subId)\r",
																			"            console.log(value);\r",
																			"            pm.expect(value.length).to.eql(1);\r",
																			"            });\r",
																			"        });\r",
																			"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																			"}, 3000);\r",
																			"    \r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity No Trigger",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Subcription",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
																	"host": [
																		"{{subscription-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"subscriptions",
																		"{{subId}}"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Trigger geoQuery",
											"item": [
												{
													"name": "Near",
													"item": [
														{
															"name": "Create Subscription With Id No Context",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"var subId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"subId\", subId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:storeSubscription3\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"geoQ\": {\"geoproperty\":\"location\", \"georel\":\"near;maxDistance==1500\",\"geometry\":\"Point\",\"coordinates\":[80,80]},\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
																},
																"url": {
																	"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
																	"host": [
																		"{{subscription-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"subscriptions"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity Trigger Notification",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"entityId\", entityId);\r",
																			"var subId = pm.collectionVariables.get(\"subId\");\r",
																			"\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"setTimeout(function(){\r",
																			"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																			"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																			"            pm.test(\"Check for notification\", function () {\r",
																			"            var value = response.json();\r",
																			"            console.log(\"Retrieving notifications from testserver\")\r",
																			"            console.log(notificationServer + \"/\" + subId)\r",
																			"            console.log(value);\r",
																			"            pm.expect(value.length).to.eql(1);\r",
																			"            notification = value[0].body;\r",
																			"            headers = value[0].headers;\r",
																			"            pm.expect(notification.type).to.eql(\"Notification\");\r",
																			"            pm.expect(notification).to.have.property(\"id\");\r",
																			"            pm.expect(notification.data.length).to.eql(1);\r",
																			"            var notificationData = notification.data[0];\r",
																			"            delete notificationData[\"createdAt\"];\r",
																			"            delete notificationData[\"modifiedAt\"];\r",
																			"            console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																			"            console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																			"            pm.expect(notificationData).to.eql(payloadBody);\r",
																			"            });\r",
																			"        });\r",
																			"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																			"}, 3000);\r",
																			"    \r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"urn:ngsi-ld:test3\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [80, 80.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity No Trigger",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"entityId\", entityId);\r",
																			"var subId = pm.collectionVariables.get(\"subId\");\r",
																			"\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"setTimeout(function(){\r",
																			"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																			"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																			"            pm.test(\"Check for notification\", function () {\r",
																			"            var value = response.json();\r",
																			"            console.log(\"Retrieving notifications from testserver\")\r",
																			"            console.log(notificationServer + \"/\" + subId)\r",
																			"            console.log(value);\r",
																			"            pm.expect(value.length).to.eql(1);\r",
																			"            });\r",
																			"        });\r",
																			"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																			"}, 3000);\r",
																			"    \r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"urn:ngsi-ld:test4\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [50, 50.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity No Trigger",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Subcription",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
																	"host": [
																		"{{subscription-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"subscriptions",
																		"{{subId}}"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Trigger watchedAttrs",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:Subscription:mytest6\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"watchedAttributes\": [\"mywatchedprop\"],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity Trigger Notification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"            var value = response.json();\r",
																	"            console.log(\"Retrieving notifications from testserver\")\r",
																	"            console.log(notificationServer + \"/\" + subId)\r",
																	"            console.log(value);\r",
																	"            pm.expect(value.length).to.eql(1);\r",
																	"            notification = value[0].body;\r",
																	"            headers = value[0].headers;\r",
																	"            pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"            pm.expect(notification).to.have.property(\"id\");\r",
																	"            pm.expect(notification.data.length).to.eql(1);\r",
																	"            var notificationData = notification.data[0];\r",
																	"            delete notificationData[\"createdAt\"];\r",
																	"            delete notificationData[\"modifiedAt\"];\r",
																	"            console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																	"            console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"            pm.expect(notificationData).to.eql(payloadBody);\r",
																	"            });\r",
																	"        });\r",
																	"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"mywatchedprop\": {\"type\": \"Property\", \"value\": \"trigger\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testref\": {\"type\": \"Relationship\", \"object\": \"urn:mytest1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Trigger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"            var value = response.json();\r",
																	"            console.log(\"Retrieving notifications from testserver\")\r",
																	"            console.log(notificationServer + \"/\" + subId)\r",
																	"            console.log(value);\r",
																	"            pm.expect(value.length).to.eql(1);\r",
																	"            });\r",
																	"        });\r",
																	"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity No Trigger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Interval Subscription",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": " {\r\n        \"id\": \"urn:ngsi-ld:Vehicle:A500\",\r\n        \"type\": \"Vehicle\",\r\n        \"brandName\": {\r\n            \"type\": \"Property\",\r\n            \"value\": \"Mercedes\"\r\n        },\r\n        \"speed\": {\r\n            \"type\": \"Property\",\r\n            \"value\": 80\r\n        }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"var created = pm.collectionVariables.get(\"created\");\r",
																	"var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"console.log(notificationServer + \"/\" + subId)\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});\r",
																	"setTimeout(function(){\r",
																	"    \r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.greaterThan(2);\r",
																	"                for(let i=0; i < 3; i++){\r",
																	"                    notification = value[i].body;\r",
																	"                    headers = value[i].headers;\r",
																	"                    pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                    pm.expect(notification).to.have.property(\"id\");\r",
																	"                    pm.expect(notification.data.length).to.eql(1);\r",
																	"                    var notificationData = notification.data[0];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(created);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"    }, 15000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"id\": \"urn:ngsi-ld:Subscription:withTimeInterval\",\r\n  \"type\": \"Subscription\",\r\n  \"entities\": [{\"type\": \"Vehicle\"}],\r\n  \"timeInterval\": 5,\r\n  \"throttling\": 0,\r\n  \"notification\": {\r\n    \"format\": \"normalized\",\r\n    \"attributes\": [\"speed\", \"brandName\"],\r\n    \"endpoint\": {\r\n      \"uri\": \"{{notificationserver}}\",\r\n      \"accept\": \"application/json\"\r\n    }\r\n  }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Interval Subscription with context in Link",
											"item": [
												{
													"name": "Create Simple Entity Context in Link",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://fiware.github.io/data-models/full-context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": " {\r\n        \"id\": \"urn:ngsi-ld:Vehicle:A500\",\r\n        \"type\": \"Vehicle\",\r\n        \"brandName\": {\r\n            \"type\": \"Property\",\r\n            \"value\": \"Mercedes\"\r\n        },\r\n        \"speed\": {\r\n            \"type\": \"Property\",\r\n            \"value\": 80\r\n        }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"var created = pm.collectionVariables.get(\"created\");\r",
																	"var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"console.log(notificationServer + \"/\" + subId)\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});\r",
																	"setTimeout(function(){\r",
																	"    \r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.greaterThan(2);\r",
																	"                for(let i=0; i < 3; i++){\r",
																	"                    notification = value[i].body;\r",
																	"                    headers = value[i].headers;\r",
																	"                    pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                    pm.expect(notification).to.have.property(\"id\");\r",
																	"                    pm.expect(notification.data.length).to.eql(1);\r",
																	"                    var notificationData = notification.data[0];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(created);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"    }, 15000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://fiware.github.io/data-models/full-context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"id\": \"urn:ngsi-ld:Subscription:withTimeInterval123\",\r\n  \"type\": \"Subscription\",\r\n  \"entities\": [{\"type\": \"Vehicle\"}],\r\n  \"timeInterval\": 5,\r\n  \"throttling\": 0,\r\n  \"notification\": {\r\n    \"format\": \"normalized\",\r\n    \"attributes\": [\"speed\", \"brandName\"],\r\n    \"endpoint\": {\r\n      \"uri\": \"{{notificationserver}}\",\r\n      \"accept\": \"application/json\"\r\n    }\r\n  }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "/csourceRegistrations",
							"item": [
								{
									"name": "Registration Create Tests",
									"item": [
										{
											"name": "No Context",
											"item": [
												{
													"name": "Create Simple Registry Entry No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var cSourceId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"cSourceId\", cSourceId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(cSourceId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:ContextSourceRegistration:csr1a3456\",\r\n\t\"type\": \"ContextSourceRegistration\",\r\n\t\"information\": [{\r\n\t\t\t\"entities\": [{\r\n\t\t\t\t\"type\": \"Test2\"\r\n\t\t\t}]\r\n\t\t}\r\n\t],\r\n\t\"endpoint\": \"http://localhost:9080\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get created registration and validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + expected);\r",
																	"    console.log(\"Received: \" + jsonData);\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceId}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete registration",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceId}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Context In Body",
											"item": [
												{
													"name": "Create simple registration with @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var cSourceId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"cSourceId\", cSourceId);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[\"@context\"][0]);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(cSourceId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:ContextSourceRegistration:csr1a3456\",\r\n\t\"type\": \"ContextSourceRegistration\",\r\n\t\"information\": [{\r\n\t\t\t\"entities\": [{\r\n\t\t\t\t\"type\": \"Test2\"\r\n\t\t\t}]\r\n\t\t}\r\n\t],\r\n\t\"endpoint\": \"http://localhost:9080\",\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get created registration and validate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"Received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceId}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete registration",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceId}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Context in Link",
											"item": [
												{
													"name": "Create Simple Regisration With @context in link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var cSourceId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"cSourceId\", cSourceId);\r",
																	"pm.collectionVariables.set(\"link\", pm.request.headers.get(\"Link\"));\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(cSourceId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:ContextSourceRegistration:csr1a3456\",\r\n\t\"type\": \"ContextSourceRegistration\",\r\n\t\"information\": [{\r\n\t\t\t\"entities\": [{\r\n\t\t\t\t\"type\": \"Test2\"\r\n\t\t\t}]\r\n\t\t}\r\n\t],\r\n\t\"endpoint\": \"http://localhost:9080\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Created Registration and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"var expectedLink = pm.collectionVariables.get(\"link\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});\r",
																	"pm.test(\"Validate Link header\", function () {\r",
																	"    var headers = pm.response.headers.all();\r",
																	"    var links = []\r",
																	"    headers.forEach(function(itm, idx){\r",
																	"        if(itm.key == \"Link\"){\r",
																	"            links.push(itm.value);\r",
																	"        }\r",
																	"    });\r",
																	"    console.log(\"expected Link: \" + expectedLink);\r",
																	"    console.log(\"received Links: \" + links);\r",
																	"    pm.expect(links).to.include(expectedLink);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceId}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceId}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Registration Queries",
									"item": [
										{
											"name": "Type",
											"item": [
												{
													"name": "Create Simple Registry Entry TBF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var cSourceId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"cSourceIdTBF\", cSourceId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(cSourceId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:ContextSourceRegistration:csr1a3456\",\r\n\t\"type\": \"ContextSourceRegistration\",\r\n\t\"information\": [{\r\n\t\t\t\"entities\": [{\r\n\t\t\t\t\"type\": \"Test2\"\r\n\t\t\t}]\r\n\t\t}\r\n\t],\r\n\t\"endpoint\": \"http://localhost:9080\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Registry Entry TBNF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var cSourceId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"cSourceIdTBNF\", cSourceId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(cSourceId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"urn:ngsi-ld:ContextSourceRegistration:csr1a34561\",\r\n\t\"type\": \"ContextSourceRegistration\",\r\n\t\"information\": [{\r\n\t\t\t\"entities\": [{\r\n\t\t\t\t\"type\": \"Test3\"\r\n\t\t\t}]\r\n\t\t}\r\n\t],\r\n\t\"endpoint\": \"http://localhost:9080\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get created registration and validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains registry to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(1);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																	"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations?type=Test2",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations"
															],
															"query": [
																{
																	"key": "type",
																	"value": "Test2"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete registration TBF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceIdTBF}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceIdTBF}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete registration TBNF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceIdTBNF}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceIdTBNF}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "/csourceSubscriptions",
							"item": []
						},
						{
							"name": "/temporal/entities",
							"item": [
								{
									"name": "Temporal Entity Create Test",
									"item": [
										{
											"name": "no @Context",
											"item": [
												{
													"name": "Temporal Entity Create with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Response validations\", function () {\r",
																	"     pm.expect(entityId).to.equal(\"urn:test:testbatchentity1005\");\r",
																	"   \r",
																	"}); \r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testbatchentity1005\",\r\n    \"type\": \"Vehicle\",\r\n    \"brandName\": [\r\n        {\r\n            \"type\": \"Property\",\r\n            \"value\": \"Mercedes\",\r\n            \"instanceId\": \"urn:ngsi-ld:2044b133-9659-4406-ab84-5017088942fc\"\r\n        }\r\n    ],\r\n    \"speed\": [\r\n        {\r\n            \"type\": \"Property\",\r\n            \"value\": 91,\r\n            \"instanceId\": \"urn:ngsi-ld:8b969313-81e9-4488-93ad-75d4cf0232d7\",\r\n            \"observedAt\": \"2022-09-10T13:21:24.000Z\"\r\n        },\r\n        {\r\n            \"type\": \"Property\",\r\n            \"value\": 80,\r\n            \"instanceId\": \"urn:ngsi-ld:38b3a5cc-5c8b-4557-8a39-8b66d0b2a52b\",\r\n            \"observedAt\": \"2022-09-10T12:21:24.000Z\"\r\n        }\r\n    ]\r\n}"
														},
														"url": {
															"raw": "{{history-manager}}/ngsi-ld/v1/temporal/entities",
															"host": [
																"{{history-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"temporal",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Created Entity by type and Content Validation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"Received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(JSON.stringify(jsonData).toString).to.eql(JSON.stringify(expected).toString);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{history-manager}}/ngsi-ld/v1/temporal/entities?type=Vehicle",
															"host": [
																"{{history-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"temporal",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "Vehicle"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Created Entity by type  and option and Content Validation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"Received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(JSON.stringify(jsonData).toString).to.eql(JSON.stringify(expected).toString);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{history-manager}}/ngsi-ld/v1/temporal/entities?type=Vehicle&options=temporalValues",
															"host": [
																"{{history-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"temporal",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "Vehicle"
																},
																{
																	"key": "options",
																	"value": "temporalValues"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Temporal  Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{history-manager}}/ngsi-ld/v1/temporal/entities/{{entityId}}",
															"host": [
																"{{history-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"temporal",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in body",
											"item": [
												{
													"name": "Create temporal entity with  @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[\"@context\"][0]);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testbatchentity1005\",\r\n    \"type\": \"Vehicle\",\r\n    \"brandName\": [\r\n        {\r\n            \"type\": \"Property\",\r\n            \"value\": \"Mercedes\",\r\n            \"instanceId\": \"urn:ngsi-ld:2044b133-9659-4406-ab84-5017088942fc\"\r\n        }\r\n    ],\r\n    \"speed\": [\r\n        {\r\n            \"type\": \"Property\",\r\n            \"value\": 91,\r\n            \"instanceId\": \"urn:ngsi-ld:8b969313-81e9-4488-93ad-75d4cf0232d7\",\r\n            \"observedAt\": \"2022-09-10T13:21:24.000Z\"\r\n        },\r\n        {\r\n            \"type\": \"Property\",\r\n            \"value\": 80,\r\n            \"instanceId\": \"urn:ngsi-ld:38b3a5cc-5c8b-4557-8a39-8b66d0b2a52b\",\r\n            \"observedAt\": \"2022-09-10T12:21:24.000Z\"\r\n        }\r\n    ],\"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}"
														},
														"url": {
															"raw": "{{history-manager}}/ngsi-ld/v1/temporal/entities",
															"host": [
																"{{history-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"temporal",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Created Temporal Entity by type and Content Validation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"Received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(JSON.stringify(jsonData).toString).to.eql(JSON.stringify(expected).toString);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{history-manager}}/ngsi-ld/v1/temporal/entities?type=Vehicle",
															"host": [
																"{{history-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"temporal",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "Vehicle"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Created Temporal Entity by type and optionand and Content Validation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"Received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(JSON.stringify(jsonData).toString).to.eql(JSON.stringify(expected).toString);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{history-manager}}/ngsi-ld/v1/temporal/entities?type=Vehicle&options=temporalValues",
															"host": [
																"{{history-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"temporal",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "Vehicle"
																},
																{
																	"key": "options",
																	"value": "temporalValues"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Temporal Entity with @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{history-manager}}/ngsi-ld/v1/temporal/entities/{{entityId}}",
															"host": [
																"{{history-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"temporal",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "/entityOperations",
							"item": [
								{
									"name": "Batch entity create test",
									"item": [
										{
											"name": "no @context",
											"item": [
												{
													"name": "Create batch entity with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId2);\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207]);\r",
																	"});\r",
																	"pm.test(\"Response validations\", function () {\r",
																	"     pm.expect(entityId1).to.equal(\"urn:test:testbatchentity1005\");\r",
																	"     pm.expect(entityId2).to.equal(\"urn:test:testbatchentity1006\");\r",
																	"}); \r",
																	"\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  },\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "get batch entity with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"  var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"Received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});\r",
																	" \r",
																	" pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	" \r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"type\": \"Query\",\r\n    \"entities\": [\r\n        {\r\n            \"id\": \"urn:test:testbatchentity1005\",\r\n            \"type\": \"TestType\"\r\n        },\r\n        {\r\n            \"id\": \"urn:test:testbatchentity1006\",\r\n            \"type\": \"TestType\"\r\n        }\r\n    ]\r\n}"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/query",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"query"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete batch entity with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"urn:test:testbatchentity1005\",\r\n    \"urn:test:testbatchentity1006\"\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in body",
											"item": [
												{
													"name": "Create batch entity with  @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId2\", entityId2);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[0][\"@context\"]);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[1][\"@context\"]);\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207]);\r",
																	"});\r",
																	"pm.test(\"Response validations\", function () {\r",
																	"     pm.expect(entityId1).to.equal(\"urn:test:testbatchentity1005\");\r",
																	"     pm.expect(entityId2).to.equal(\"urn:test:testbatchentity1006\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n     \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  },\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n     \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "get batch entity with  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	" var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	" \r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"type\": \"Query\",\r\n    \"entities\": [\r\n        {\r\n            \"id\": \"urn:test:testbatchentity1005\",\r\n            \"type\": \"TestType\"\r\n        },\r\n        {\r\n            \"id\": \"urn:test:testbatchentity1006\",\r\n            \"type\": \"TestType\"\r\n        }\r\n    ],\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/query",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"query"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete batch entity with  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"urn:test:testbatchentity1005\",\r\n    \"urn:test:testbatchentity1006\"\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Batch entity upsert test",
									"item": [
										{
											"name": "no @context",
											"item": [
												{
													"name": "Create batch entity with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId2\", entityId2);\r",
																	"\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207]);\r",
																	"    \r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response validations\", function () {\r",
																	"     pm.expect(entityId1).to.equal(\"urn:test:testbatchentity1005\");\r",
																	"     pm.expect(entityId2).to.equal(\"urn:test:testbatchentity1006\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  },\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "upsert batch entity with no  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId2\", entityId2);\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207,204]);\r",
																	"});\r",
																	"pm.test(\"Response validations\", function () {\r",
																	"     pm.expect(entityId1).to.equal(\"urn:test:testbatchentity1005\");\r",
																	"     pm.expect(entityId2).to.equal(\"urn:test:testbatchentity1007\");\r",
																	"});\r",
																	" \r",
																	" "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststringdata\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 482},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 259.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  },\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1007\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/upsert",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"upsert"
															]
														}
													},
													"response": []
												},
												{
													"name": "get batch entity with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"   var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"type\": \"Query\",\r\n    \"entities\": [\r\n        {\r\n            \"id\": \"urn:test:testbatchentity1005\",\r\n            \"type\": \"TestType\"\r\n        },\r\n        {\r\n            \"id\": \"urn:test:testbatchentity1006\",\r\n            \"type\": \"TestType\"\r\n        },\r\n        {\r\n            \"id\": \"urn:test:testbatchentity1007\",\r\n            \"type\": \"TestType\"\r\n        }\r\n    ]\r\n}"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/query",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"query"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete batch entity with no @context Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"urn:test:testbatchentity1005\",\r\n    \"urn:test:testbatchentity1006\",\r\n    \"urn:test:testbatchentity1007\"\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in body",
											"item": [
												{
													"name": "Create batch entity with  @context in body Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId2\", entityId2);\r",
																	"pm.collectionVariables.set(\"@context1\", payloadBody[0][\"@context\"]);\r",
																	"pm.collectionVariables.set(\"@context2\", payloadBody[1][\"@context\"]);\r",
																	"pm.test(\"Validate response\", function () {\r",
																	"    pm.expect(entityId1).to.eql(\"urn:test:testbatchentity1005\");\r",
																	"    pm.expect(entityId2).to.eql(\"urn:test:testbatchentity1006\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207]);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n     \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  },\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n     \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "upsert batch entity with  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId2\", entityId2);\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207,204]);\r",
																	"});\r",
																	"pm.test(\"Validate response\", function () {\r",
																	"    pm.expect(entityId1).to.eql(\"urn:test:testbatchentity1005\");\r",
																	"    pm.expect(entityId2).to.eql(\"urn:test:testbatchentity1007\");\r",
																	"});\r",
																	" \r",
																	" "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststringdata\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 265},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 302.580},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n     \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  },\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1007\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n     \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/upsert",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"upsert"
															]
														}
													},
													"response": []
												},
												{
													"name": "get batch entity with  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	" var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"type\": \"Query\",\r\n    \"entities\": [\r\n        {\r\n            \"id\": \"urn:test:testbatchentity1005\",\r\n            \"type\": \"TestType\"\r\n        },\r\n        {\r\n            \"id\": \"urn:test:testbatchentity1006\",\r\n            \"type\": \"TestType\"\r\n        }\r\n    ],\"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/query",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"query"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete batch entity with  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"urn:test:testbatchentity1005\",\r\n    \"urn:test:testbatchentity1006\",\r\n    \"urn:test:testbatchentity1007\"\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Batch entity update test",
									"item": [
										{
											"name": "no @context",
											"item": [
												{
													"name": "Create batch entity with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId2);\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response validations\", function () {\r",
																	"     pm.expect(entityId1).to.equal(\"urn:test:testbatchentity1005\");\r",
																	"     pm.expect(entityId2).to.equal(\"urn:test:testbatchentity1006\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  },\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "update batch entity with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId2);\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([204, 207]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"No Content\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"StringDATA\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 586},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 482.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref3\"}\r\n  },\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"ValueData\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 896},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 300.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref8\"}\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/update",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"update"
															]
														}
													},
													"response": []
												},
												{
													"name": "get batch entity with no @context Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"  var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"Received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});\r",
																	" \r",
																	" pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	" \r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"type\": \"Query\",\r\n    \"entities\": [\r\n        {\r\n            \"id\": \"urn:test:testbatchentity1005\",\r\n            \"type\": \"TestType\"\r\n        },\r\n        {\r\n            \"id\": \"urn:test:testbatchentity1006\",\r\n            \"type\": \"TestType\"\r\n        }\r\n    ]\r\n}"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/query",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"query"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete batch entity with no @context Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"urn:test:testbatchentity1005\",\r\n    \"urn:test:testbatchentity1006\"\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in body",
											"item": [
												{
													"name": "Create batch entity with  @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId2\", entityId2);\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207]);\r",
																	"});\r",
																	"pm.test(\"Response validations\", function () {\r",
																	"     pm.expect(entityId1).to.equal(\"urn:test:testbatchentity1005\");\r",
																	"     pm.expect(entityId2).to.equal(\"urn:test:testbatchentity1006\");\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"  \r",
																	" \r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"StringDATA\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 586},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 482.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref3\"},\"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  },\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"ValueData\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 896},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 300.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref8\"},\"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "update batch entity with @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId2);\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([204, 207]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"No Content\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"StringDATA\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 586},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 482.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref3\"},\"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  },\r\n  {\r\n    \"id\": \"urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"ValueData\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 896},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 300.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref8\"},\"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/update",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"update"
															]
														}
													},
													"response": []
												},
												{
													"name": "get batch entity with  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	" var expected = pm.collectionVariables.get(\"created\");\r",
																	" var context = pm.collectionVariables.get(\"@context\");\r",
																	" console.log(\"cotext :: \"+ context);\r",
																	"  pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	" pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	" \r",
																	"\r",
																	" \r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"type\": \"Query\",\r\n    \"entities\": [\r\n        {\r\n            \"id\": \"urn:test:testbatchentity1005\",\r\n            \"type\": \"TestType\"\r\n        },\r\n        {\r\n            \"id\": \"urn:test:testbatchentity1006\",\r\n            \"type\": \"TestType\"\r\n        }\r\n    ],\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/query",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"query"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete batch entity with  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"urn:test:testbatchentity1005\",\r\n    \"urn:test:testbatchentity1006\"\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "/types",
							"item": []
						},
						{
							"name": "/attributes",
							"item": []
						}
					]
				},
				{
					"name": "Tenant",
					"item": [
						{
							"name": "/entities",
							"item": [
								{
									"name": "Entity Create Tests",
									"item": [
										{
											"name": "Entity No Context",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Created Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + expected);\r",
																	"    console.log(\"Received: \" + jsonData);\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Entity Context In Body",
											"item": [
												{
													"name": "Create Simple Entity With @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[\"@context\"][0]);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Created Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"Received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Entity Context in Link",
											"item": [
												{
													"name": "Create Simple Entity With @context in link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"link\", pm.request.headers.get(\"Link\"));\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Created Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"var expectedLink = pm.collectionVariables.get(\"link\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});\r",
																	"pm.test(\"Validate Link header\", function () {\r",
																	"    var headers = pm.response.headers.all();\r",
																	"    var links = []\r",
																	"    headers.forEach(function(itm, idx){\r",
																	"        if(itm.key == \"Link\"){\r",
																	"            links.push(itm.value);\r",
																	"        }\r",
																	"    });\r",
																	"    console.log(\"expected Link: \" + expectedLink);\r",
																	"    console.log(\"received Links: \" + links);\r",
																	"    pm.expect(links).to.include(expectedLink);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Entity Update Tests",
									"item": [
										{
											"name": "Update Complete Entity with no context",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update all fields of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststringupdated\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123456},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456789},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values updated\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1:updated\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"updated\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Partial Update Entity with no context",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update string test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var entityId = pm.collectionVariables.get(\"entityId\");\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"stringproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": \"teststringupdated\"}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/stringproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"stringproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate String Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update int test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var entityId = pm.collectionVariables.get(\"entityId\");\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"intproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": 1234567}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/intproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"intproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Int Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update float test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var entityId = pm.collectionVariables.get(\"entityId\");\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"floatproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": 1234567.89}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/floatproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"floatproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Float Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update complexproperty test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var entityId = pm.collectionVariables.get(\"entityId\");\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"complexproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values updated\"}}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/complexproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"complexproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and ValidateComplex Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update relationship test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var entityId = pm.collectionVariables.get(\"entityId\");\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"testrelationship\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Relationship\", \"object\": \"urn:testref1:updated\"}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/testrelationship",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"testrelationship"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Relationship Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Update Complete Entity with context in body",
											"item": [
												{
													"name": "Create Simple Entity With @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[\"@context\"][0]);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update all fields of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststringupdated\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123456},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456789},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values updated\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1:updated\"},\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"updated\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"Received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Partial Update Entity with context in body",
											"item": [
												{
													"name": "Create Simple Entity With @context in body",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[\"@context\"]);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n    \"@context\": \"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update string test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody[\"stringproperty\"]);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"stringproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststringupdated\"},\r\n    \"@context\": \"{{@context}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate String Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update int test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody[\"intproperty\"]);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"intproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"intproperty\":{\"type\": \"Property\", \"value\": 1234567},\r\n    \"@context\": \"{{@context}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Int Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update float test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody[\"floatproperty\"]);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"floatproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"floatproperty\": {\"type\": \"Property\", \"value\": 1234567.89},\r\n    \"@context\": \"{{@context}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Float Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update complexproperty test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody[\"complexproperty\"]);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"complexproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"complexproperty\":{\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values updated\"}}},\r\n    \"@context\": \"{{@context}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and ValidateComplex Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update relationship test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody[\"testrelationship\"]);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"testrelationship\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"testrelationship\":{\"type\": \"Relationship\", \"object\": \"urn:testref1:updated\"},\r\n    \"@context\": \"{{@context}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Relationship Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Update Complete Entity with context in Link",
											"item": [
												{
													"name": "Create Simple Entity With @context in link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"link\", pm.request.headers.get(\"Link\"));\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update all fields of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststringupdated\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123456},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456789},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values updated\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1:updated\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"updated\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Partial Update Entity with context in Link",
											"item": [
												{
													"name": "Create Simple Entity With @context in link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"link\", pm.request.headers.get(\"Link\"));\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update string test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"stringproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": \"teststringupdated\"}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/stringproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"stringproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate String Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update int test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"intproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": 1234567}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/intproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"intproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Int Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update float test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"floatproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": 1234567.89}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/floatproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"floatproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Float Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update complexproperty test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"complexproperty\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values updated\"}}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/complexproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"complexproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and ValidateComplex Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update relationship test field of the entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedAttrib\", \"testrelationship\");\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Relationship\", \"object\": \"urn:testref1:updated\"}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/testrelationship",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"testrelationship"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate Relationship Entry",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expectedUpdatedValue = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedUpdatedKey = pm.collectionVariables.get(\"updatedAttrib\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[expectedUpdatedKey]).to.eql(expectedUpdatedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Entity Append Tests",
									"item": [
										{
											"name": "Append new property to entity no context",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Append new field",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedKey\", \"newtestproperty\")\r",
																	"pm.collectionVariables.set(\"updatedValue\", payloadBody[\"newtestproperty\"]);\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"newtestproperty\": {\"type\": \"Relationship\", \"object\": \"urn:testref1:updated\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"var addedKey = pm.collectionVariables.get(\"updatedKey\");\r",
																	"var addedValue = pm.collectionVariables.get(\"updatedValue\");\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[addedKey]).to.eql(addedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Change existing property with append no context",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update field with append",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.collectionVariables.set(\"updatedKey\", \"stringproperty\")\r",
																	"pm.collectionVariables.set(\"updatedValue\", payloadBody[\"stringproperty\"]);\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"updated\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Updated Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"var addedKey = pm.collectionVariables.get(\"updatedKey\");\r",
																	"var addedValue = pm.collectionVariables.get(\"updatedValue\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData[addedKey]).to.eql(addedValue);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Append new relationship to entity no context",
											"item": []
										},
										{
											"name": "Change existing relationship with append no context",
											"item": []
										}
									]
								},
								{
									"name": "Entity Delete Tests",
									"item": [
										{
											"name": "Delete Entity",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Validate deletion of entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete Attribute",
											"item": []
										}
									]
								},
								{
									"name": "Query Tests",
									"item": [
										{
											"name": "Query for Type",
											"item": [
												{
													"name": "Create Simple Entity to be found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																	"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity to be not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity2\",\r\n    \"type\": \"TestType2\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query for entity type tbf",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(1);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																	"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "{{entityTypeTBF}}"
																},
																{
																	"key": "",
																	"value": "",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity TBF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityIdTBF}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity TBNF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityIdTBNF}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Query for Type and Id",
											"item": [
												{
													"name": "Create Simple Entity to be found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																	"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity to be not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity2\",\r\n    \"type\": \"TestType2\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query for entity type and id tbf",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(1);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																	"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&id={{entityIdTBF}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "{{entityTypeTBF}}"
																},
																{
																	"key": "id",
																	"value": "{{entityIdTBF}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity TBF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityIdTBF}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity TBNF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityIdTBNF}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Query for Type and IdPattern",
											"item": [
												{
													"name": "Create Simple Entity to be found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																	"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity to be not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity2\",\r\n    \"type\": \"TestType2\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query for entity type and id tbf",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(1);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																	"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&idPattern=urn:test*",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "{{entityTypeTBF}}"
																},
																{
																	"key": "idPattern",
																	"value": "urn:test*"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity TBF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityIdTBF}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity TBNF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityIdTBNF}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Query for Type with Q Filter",
											"item": [
												{
													"name": "Property regex",
													"item": []
												},
												{
													"name": "Relationship regex",
													"item": []
												},
												{
													"name": "Property equal",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring1\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 1123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 1123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"differentvalues\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref2\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for string",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=stringproperty==\"teststring\"",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "stringproperty==\"teststring\""
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for int",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=intproperty==123",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "intproperty==123"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for float",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=floatproperty==123.456",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "floatproperty==123.456"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Relationship equal",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring1\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 1123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 1123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"differentvalues\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref2\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for relationship",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=testrelationship==urn:testref1",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "testrelationship==urn:testref1"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Property smaller than",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring1\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 1123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 1123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"differentvalues\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref2\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for int",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=intproperty<223",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "intproperty<223"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for float",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=floatproperty<223.456",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "floatproperty<223.456"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Property smaller equal than",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring1\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 1123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 1123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"differentvalues\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref2\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for int",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=intproperty<=123",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "intproperty<=123"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for float",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=floatproperty<=223.456",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "floatproperty<=223.456"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Property greater than",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring1\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 1123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 1123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"differentvalues\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref2\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for int",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=intproperty>223",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "intproperty>223"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for float",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=floatproperty>223.456",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "floatproperty>223.456"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Property greater equal than",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring1\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 1123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 1123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"differentvalues\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref2\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for int",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=intproperty>=223",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "intproperty>=223"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for float",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&q=floatproperty>=223.456",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "q",
																			"value": "floatproperty>=223.456"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Query for Type with GeoQuery",
											"item": [
												{
													"name": "Near",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"tenanttest:urn:ngsi-ld:test3\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [80, 80.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"tenanttest:urn:ngsi-ld:test4\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [50, 50.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for entity tbf",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&geoproperty=location&georel=near;maxDistance==1500&geometry=Point&coordinates=[80,80]",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "geoproperty",
																			"value": "location"
																		},
																		{
																			"key": "georel",
																			"value": "near;maxDistance==1500"
																		},
																		{
																			"key": "geometry",
																			"value": "Point"
																		},
																		{
																			"key": "coordinates",
																			"value": "[80,80]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Within",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"tenanttest:urn:ngsi-ld:test3\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [80, 80.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"tenanttest:urn:ngsi-ld:test4\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [50, 50.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for entity tbf",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[79,79],[81,79],[81,81],[79,81],[79,79]]]",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "geoproperty",
																			"value": "location"
																		},
																		{
																			"key": "georel",
																			"value": "within"
																		},
																		{
																			"key": "geometry",
																			"value": "Polygon"
																		},
																		{
																			"key": "coordinates",
																			"value": "[[[79,79],[81,79],[81,81],[79,81],[79,79]]]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Equal",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"tenanttest:urn:ngsi-ld:test3\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [80, 80.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"tenanttest:urn:ngsi-ld:test4\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [50, 50.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for entity tbf",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&geoproperty=location&georel=equals&geometry=Point&coordinates=[80,80.0005]",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "geoproperty",
																			"value": "location"
																		},
																		{
																			"key": "georel",
																			"value": "equals"
																		},
																		{
																			"key": "geometry",
																			"value": "Point"
																		},
																		{
																			"key": "coordinates",
																			"value": "[80,80.0005]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Contains",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"tenanttest:urn:ngsi-ld:test3\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Polygon\", \r\n        \t\"coordinates\": [[[79,79],[81,79],[81,81],[79,81],[79,79]]]\r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"tenanttest:urn:ngsi-ld:test4\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Polygon\", \r\n        \t\"coordinates\": [[[49,49],[51,49],[51,51],[49,51],[49,49]]]\r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for entity tbf",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&geoproperty=location&georel=contains&geometry=Point&coordinates=[80,80.0005]",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "geoproperty",
																			"value": "location"
																		},
																		{
																			"key": "georel",
																			"value": "contains"
																		},
																		{
																			"key": "geometry",
																			"value": "Point"
																		},
																		{
																			"key": "coordinates",
																			"value": "[80,80.0005]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Intersects",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"tenanttest:urn:ngsi-ld:test3\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Polygon\", \r\n        \t\"coordinates\": [[[79,79],[81,79],[81,81],[79,81],[79,79]]]\r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"tenanttest:urn:ngsi-ld:test4\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Polygon\", \r\n        \t\"coordinates\": [[[49,49],[51,49],[51,51],[49,51],[49,49]]]\r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for entity tbf",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&geoproperty=location&georel=intersects&geometry=Polygon&coordinates=[[[79,79],[81,79],[81,81],[79,81],[79,79]]]",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "geoproperty",
																			"value": "location"
																		},
																		{
																			"key": "georel",
																			"value": "intersects"
																		},
																		{
																			"key": "geometry",
																			"value": "Polygon"
																		},
																		{
																			"key": "coordinates",
																			"value": "[[[79,79],[81,79],[81,81],[79,81],[79,79]]]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Disjoint",
													"item": [
														{
															"name": "Create Simple Entity to be found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBF\", entityId);\r",
																			"pm.collectionVariables.set(\"entityTypeTBF\", payloadBody.type);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"tenanttest:urn:ngsi-ld:test3\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Polygon\", \r\n        \t\"coordinates\": [[[79,79],[81,79],[81,81],[79,81],[79,79]]]\r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity to be not found",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																			"pm.collectionVariables.set(\"entityIdTBNF\", entityId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"tenanttest:urn:ngsi-ld:test4\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Polygon\", \r\n        \t\"coordinates\": [[[49,49],[51,49],[51,51],[49,51],[49,49]]]\r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Query for entity tbf",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData.length).to.eql(1);\r",
																			"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																			"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{query-manager}}/ngsi-ld/v1/entities?type={{entityTypeTBF}}&geoproperty=location&georel=disjoint&geometry=Polygon&coordinates=[[[49,49],[51,49],[51,51],[49,51],[49,49]]]",
																	"host": [
																		"{{query-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	],
																	"query": [
																		{
																			"key": "type",
																			"value": "{{entityTypeTBF}}"
																		},
																		{
																			"key": "geoproperty",
																			"value": "location"
																		},
																		{
																			"key": "georel",
																			"value": "disjoint"
																		},
																		{
																			"key": "geometry",
																			"value": "Polygon"
																		},
																		{
																			"key": "coordinates",
																			"value": "[[[49,49],[51,49],[51,51],[49,51],[49,49]]]"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBF}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity TBNF",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdTBNF}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityIdTBNF}}"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Query with scopes",
											"item": [
												{
													"name": "Create Simple Entity single 4 level scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created4level\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId4level\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"scope\": \"/abc/def/ghi/jkl\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity single 4 level scope not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created4levelnotfound\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId4levelnotfound\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"scope\": \"/nmo/pqr/stu/vwx\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity single 2 level scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created2level\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId2level\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity3\",\r\n    \"type\": \"TestType\",\r\n    \"scope\": \"/abc/def\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity single 2 level scope not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created2levelnotfound\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId2levelnotfound\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity4\",\r\n    \"type\": \"TestType\",\r\n    \"scope\": \"/nmo/pqr\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity single 1 level scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created1level\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1level\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity5\",\r\n    \"type\": \"TestType\",\r\n    \"scope\": \"/abc\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity single 1 level scope not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created1levelnotfound\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1levelnotfound\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity6\",\r\n    \"type\": \"TestType\",\r\n    \"scope\": \"/nmo\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity multi scope",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdmulti\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityIdmulti\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity7\",\r\n    \"type\": \"TestType\",\r\n    \"scope\": [\"/abc/def/ghi/jkl\",\"/nmo/pqr/stu/vwx\"],\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Query scope hash test first level",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(4);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"created4level\"));\r",
																	"    pm.expect(jsonData[1]).to.eql(pm.collectionVariables.get(\"created2level\"));\r",
																	"    pm.expect(jsonData[2]).to.eql(pm.collectionVariables.get(\"created1level\"));\r",
																	"    pm.expect(jsonData[3]).to.eql(pm.collectionVariables.get(\"createdmulti\"));\r",
																	"    \r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type=TestType&scopeQ=/abc/%23",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "TestType"
																},
																{
																	"key": "scopeQ",
																	"value": "/abc/%23"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Query scope hash test second level",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(3);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"created4level\"));\r",
																	"    pm.expect(jsonData[1]).to.eql(pm.collectionVariables.get(\"created2level\"));\r",
																	"    pm.expect(jsonData[2]).to.eql(pm.collectionVariables.get(\"createdmulti\"));\r",
																	"    \r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type=TestType&scopeQ=/abc/def/%23",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "TestType"
																},
																{
																	"key": "scopeQ",
																	"value": "/abc/def/%23"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Query scope plus test second level",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(2);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"created4level\"));\r",
																	"    pm.expect(jsonData[1]).to.eql(pm.collectionVariables.get(\"createdmulti\"));\r",
																	"    \r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type=TestType&scopeQ=/abc/def/%2B/jkl",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "TestType"
																},
																{
																	"key": "scopeQ",
																	"value": "/abc/def/%2B/jkl"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Query scope test or 2 levels",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(2);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"created2level\"));\r",
																	"    pm.expect(jsonData[1]).to.eql(pm.collectionVariables.get(\"created2levelnotfound\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type=TestType&scopeQ=/abc/def%7C/nmo/pqr",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "TestType"
																},
																{
																	"key": "scopeQ",
																	"value": "/abc/def%7C/nmo/pqr"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Query scope test and 4 levels",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(1);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdmulti\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type=TestType&scopeQ=/abc/def/ghi/jkl%3B/nmo/pqr/stu/vwx",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "TestType"
																},
																{
																	"key": "scopeQ",
																	"value": "/abc/def/ghi/jkl%3B/nmo/pqr/stu/vwx"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Query scope test or hash and plus",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains entity to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    jsonData.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"    var tmp = [pm.collectionVariables.get(\"createdmulti\"), pm.collectionVariables.get(\"created4levelnotfound\"), pm.collectionVariables.get(\"created2levelnotfound\"), pm.collectionVariables.get(\"created4level\")];\r",
																	"    tmp.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"    pm.expect(jsonData.length).to.eql(4);\r",
																	"    for(let i = 0; i < 4; i++){\r",
																	"        var expected = tmp[i];\r",
																	"        var received = jsonData[i];\r",
																	"        console.log(\"Expected: \" + expected);\r",
																	"        console.log(\"Received: \" + received);\r",
																	"        pm.expect(received).to.eql(expected);\r",
																	"    }\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities?type=TestType&scopeQ=/abc/def/%2B/jkl%7C/nmo/pqr/%23",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															],
															"query": [
																{
																	"key": "type",
																	"value": "TestType"
																},
																{
																	"key": "scopeQ",
																	"value": "/abc/def/%2B/jkl%7C/nmo/pqr/%23"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity 4 level",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId4level}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId4level}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity 4 level not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId4levelnotfound}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId4levelnotfound}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity 2 level",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId2level}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId2level}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity 2 level not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId2levelnotfound}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId2levelnotfound}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity 1 level not found",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId1levelnotfound}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId1levelnotfound}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity 1 level",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId1level}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId1level}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity multi",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityIdmulti}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityIdmulti}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "/subscriptions",
							"item": [
								{
									"name": "Subscriptions Create Tests",
									"item": [
										{
											"name": "no @context",
											"item": [
												{
													"name": "Create Subscription with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test2\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>90\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															],
															"query": [
																{
																	"key": "",
																	"value": null,
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete subscription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in body",
											"item": [
												{
													"name": "Create Subscription with @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[\"@context\"][0]);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test2\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>90\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    },\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															],
															"query": [
																{
																	"key": "",
																	"value": null,
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete subscription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in Link",
											"item": [
												{
													"name": "Create Subscription with @context in link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.collectionVariables.set(\"link\", pm.request.headers.get(\"Link\"));\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test2\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>90\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"var expectedLink = pm.collectionVariables.get(\"link\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});\r",
																	"pm.test(\"Validate Link header\", function () {\r",
																	"    var headers = pm.response.headers.all();\r",
																	"    var links = []\r",
																	"    headers.forEach(function(itm, idx){\r",
																	"        if(itm.key == \"Link\"){\r",
																	"            links.push(itm.value);\r",
																	"        }\r",
																	"    });\r",
																	"    console.log(\"expected Link: \" + expectedLink);\r",
																	"    console.log(\"received Links: \" + links);\r",
																	"    pm.expect(links).to.include(expectedLink);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete subscription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Subscriptions Update Tests",
									"item": [
										{
											"name": "no @context",
											"item": [
												{
													"name": "Create Subscription with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test2\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>90\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															],
															"query": [
																{
																	"key": "",
																	"value": null,
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Subscription with no @context Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test3\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>100\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate update",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"updated\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															],
															"query": [
																{
																	"key": "",
																	"value": null,
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete subscription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in body",
											"item": [
												{
													"name": "Create Subscription with @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[\"@context\"][0]);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test2\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>90\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    },\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															],
															"query": [
																{
																	"key": "",
																	"value": null,
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Subscription with @context in body Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test3\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>100\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    },\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"updated\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															],
															"query": [
																{
																	"key": "",
																	"value": null,
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete subscription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in Link",
											"item": [
												{
													"name": "Create Subscription with @context in link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.collectionVariables.set(\"link\", pm.request.headers.get(\"Link\"));\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test2\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>90\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"var expectedLink = pm.collectionVariables.get(\"link\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});\r",
																	"pm.test(\"Validate Link header\", function () {\r",
																	"    var headers = pm.response.headers.all();\r",
																	"    var links = []\r",
																	"    headers.forEach(function(itm, idx){\r",
																	"        if(itm.key == \"Link\"){\r",
																	"            links.push(itm.value);\r",
																	"        }\r",
																	"    });\r",
																	"    console.log(\"expected Link: \" + expectedLink);\r",
																	"    console.log(\"received Links: \" + links);\r",
																	"    pm.expect(links).to.include(expectedLink);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update Subscription with @context in link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"updated\", payloadBody);\r",
																	"\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:storeSubscription4\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"Test3\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"speed>100\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"http://localhost:8080\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Retrieve sub and validate update",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"updated\");\r",
																	"var expectedLink = pm.collectionVariables.get(\"link\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    delete jsonData['isActive'];\r",
																	"    delete jsonData['status'];\r",
																	"    console.log(\"expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});\r",
																	"pm.test(\"Validate Link header\", function () {\r",
																	"    var headers = pm.response.headers.all();\r",
																	"    var links = []\r",
																	"    headers.forEach(function(itm, idx){\r",
																	"        if(itm.key == \"Link\"){\r",
																	"            links.push(itm.value);\r",
																	"        }\r",
																	"    });\r",
																	"    console.log(\"expected Link: \" + expectedLink);\r",
																	"    console.log(\"received Links: \" + links);\r",
																	"    pm.expect(links).to.include(expectedLink);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete subscription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Subscriptions Delete Tests",
									"item": []
								},
								{
									"name": "Subscriptions Trigger Tests",
									"item": [
										{
											"name": "Trigger Type Subscription",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:mytest1\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"            var value = response.json();\r",
																	"            console.log(\"Retrieving notifications from testserver\")\r",
																	"            console.log(notificationServer + \"/\" + subId)\r",
																	"            console.log(value);\r",
																	"            pm.expect(value.length).to.eql(1);\r",
																	"            notification = value[0].body;\r",
																	"            headers = value[0].headers;\r",
																	"            pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"            pm.expect(notification).to.have.property(\"id\");\r",
																	"            pm.expect(notification.data.length).to.eql(1);\r",
																	"            var notificationData = notification.data[0];\r",
																	"            delete notificationData[\"createdAt\"];\r",
																	"            delete notificationData[\"modifiedAt\"];\r",
																	"            console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																	"            console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"            pm.expect(notificationData).to.eql(payloadBody);\r",
																	"            });\r",
																	"        });\r",
																	"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type Subscription with batch upsert",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:mytest61\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(1);\r",
																	"                notification = value[0].body;\r",
																	"                headers = value[0].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(21);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 21; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity1\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity2\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity3\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity4\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity5\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity6\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity7\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity8\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity9\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity10\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity12\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity13\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity14\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity15\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity16\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity17\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity18\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity19\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity20\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity21\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/upsert",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"upsert"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"tenanttest:urn:test:testentity0\",\r\n    \"tenanttest:urn:test:testentity1\",\r\n    \"tenanttest:urn:test:testentity2\",\r\n    \"tenanttest:urn:test:testentity3\",\r\n    \"tenanttest:urn:test:testentity4\",\r\n    \"tenanttest:urn:test:testentity5\",\r\n    \"tenanttest:urn:test:testentity6\",\r\n    \"tenanttest:urn:test:testentity7\",\r\n    \"tenanttest:urn:test:testentity8\",\r\n    \"tenanttest:urn:test:testentity9\",\r\n    \"tenanttest:urn:test:testentity10\",\r\n    \"tenanttest:urn:test:testentity12\",\r\n    \"tenanttest:urn:test:testentity13\",\r\n    \"tenanttest:urn:test:testentity14\",\r\n    \"tenanttest:urn:test:testentity15\",\r\n    \"tenanttest:urn:test:testentity16\",\r\n    \"tenanttest:urn:test:testentity17\",\r\n    \"tenanttest:urn:test:testentity18\",\r\n    \"tenanttest:urn:test:testentity19\",\r\n    \"tenanttest:urn:test:testentity20\",\r\n    \"tenanttest:urn:test:testentity21\"\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type Subscription with batch upsert with errors in it",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:mytest61errorinit\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 207\", function () {\r",
																	"    pm.response.to.have.status(207);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(1);\r",
																	"                notification = value[0].body;\r",
																	"                headers = value[0].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(19);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 19; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i+2]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"WrongType\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity1\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"WrongType\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity2\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity3\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity4\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity5\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity6\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity7\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity8\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity9\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity10\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity12\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity13\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity14\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity15\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity16\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity17\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity18\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity19\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity20\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity21\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/upsert",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"upsert"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"tenanttest:urn:test:testentity2\",\r\n    \"tenanttest:urn:test:testentity3\",\r\n    \"tenanttest:urn:test:testentity4\",\r\n    \"tenanttest:urn:test:testentity5\",\r\n    \"tenanttest:urn:test:testentity6\",\r\n    \"tenanttest:urn:test:testentity7\",\r\n    \"tenanttest:urn:test:testentity8\",\r\n    \"tenanttest:urn:test:testentity9\",\r\n    \"tenanttest:urn:test:testentity10\",\r\n    \"tenanttest:urn:test:testentity12\",\r\n    \"tenanttest:urn:test:testentity13\",\r\n    \"tenanttest:urn:test:testentity14\",\r\n    \"tenanttest:urn:test:testentity15\",\r\n    \"tenanttest:urn:test:testentity16\",\r\n    \"tenanttest:urn:test:testentity17\",\r\n    \"tenanttest:urn:test:testentity18\",\r\n    \"tenanttest:urn:test:testentity19\",\r\n    \"tenanttest:urn:test:testentity20\",\r\n    \"tenanttest:urn:test:testentity21\"\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type Subscription with batch create and patch",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:mytest32\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(1);\r",
																	"                notification = value[0].body;\r",
																	"                headers = value[0].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(21);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 21; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity1\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity2\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity3\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity4\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity5\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity6\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity7\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity8\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity9\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity10\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity12\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity13\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity14\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity15\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity16\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity17\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity18\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity19\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity20\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity21\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update batch",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(2);\r",
																	"                notification = value[1].body;\r",
																	"                headers = value[1].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(21);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 21; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity1\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity2\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity3\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity4\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity5\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity6\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity7\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity8\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity9\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity10\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity12\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity13\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity14\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity15\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity16\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity17\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity18\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity19\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity20\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity21\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/update",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"update"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"tenanttest:urn:test:testentity0\",\r\n    \"tenanttest:urn:test:testentity1\",\r\n    \"tenanttest:urn:test:testentity2\",\r\n    \"tenanttest:urn:test:testentity3\",\r\n    \"tenanttest:urn:test:testentity4\",\r\n    \"tenanttest:urn:test:testentity5\",\r\n    \"tenanttest:urn:test:testentity6\",\r\n    \"tenanttest:urn:test:testentity7\",\r\n    \"tenanttest:urn:test:testentity8\",\r\n    \"tenanttest:urn:test:testentity9\",\r\n    \"tenanttest:urn:test:testentity10\",\r\n    \"tenanttest:urn:test:testentity12\",\r\n    \"tenanttest:urn:test:testentity13\",\r\n    \"tenanttest:urn:test:testentity14\",\r\n    \"tenanttest:urn:test:testentity15\",\r\n    \"tenanttest:urn:test:testentity16\",\r\n    \"tenanttest:urn:test:testentity17\",\r\n    \"tenanttest:urn:test:testentity18\",\r\n    \"tenanttest:urn:test:testentity19\",\r\n    \"tenanttest:urn:test:testentity20\",\r\n    \"tenanttest:urn:test:testentity21\"\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type Subscription with create HUGE entities and entity list",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:mytesthuge\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(1);\r",
																	"                notification = value[0].body;\r",
																	"                headers = value[0].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(21);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 21; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 4000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity1\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity2\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity3\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity4\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity5\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity6\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity7\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity8\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity9\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity10\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity12\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity13\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity14\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity15\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity16\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity17\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity18\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity19\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity20\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity21\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty1\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty2\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty3\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty4\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty5\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty6\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty7\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty8\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty9\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"stringproperty0\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty1\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty2\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty3\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty4\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty5\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty6\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty7\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty8\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty9\": {\"type\": \"Property\", \"value\": 123},\r\n        \"intproperty0\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty1\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty2\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty3\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty4\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty5\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty6\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty7\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty8\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty9\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"floatproperty0\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty1\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty2\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty3\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty4\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty5\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty6\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty7\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty8\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty9\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"complexproperty0\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"tenanttest:urn:test:testentity0\",\r\n    \"tenanttest:urn:test:testentity1\",\r\n    \"tenanttest:urn:test:testentity2\",\r\n    \"tenanttest:urn:test:testentity3\",\r\n    \"tenanttest:urn:test:testentity4\",\r\n    \"tenanttest:urn:test:testentity5\",\r\n    \"tenanttest:urn:test:testentity6\",\r\n    \"tenanttest:urn:test:testentity7\",\r\n    \"tenanttest:urn:test:testentity8\",\r\n    \"tenanttest:urn:test:testentity9\",\r\n    \"tenanttest:urn:test:testentity10\",\r\n    \"tenanttest:urn:test:testentity12\",\r\n    \"tenanttest:urn:test:testentity13\",\r\n    \"tenanttest:urn:test:testentity14\",\r\n    \"tenanttest:urn:test:testentity15\",\r\n    \"tenanttest:urn:test:testentity16\",\r\n    \"tenanttest:urn:test:testentity17\",\r\n    \"tenanttest:urn:test:testentity18\",\r\n    \"tenanttest:urn:test:testentity19\",\r\n    \"tenanttest:urn:test:testentity20\",\r\n    \"tenanttest:urn:test:testentity21\"\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type Subscription with create HUGE entities and huge entity list",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:mytesthugehuge\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"ccoc.mon.docker.container\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(1);\r",
																	"                notification = value[0].body;\r",
																	"                headers = value[0].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(30);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 21; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:1\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:2\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:3\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:4\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:5\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:6\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:7\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:8\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:9\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:10\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:11\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:12\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:13\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:14\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:15\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:16\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:17\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:18\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:19\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:20\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:21\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:22\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:23\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:24\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:25\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:26\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:27\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:28\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:29\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}, {\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Mon.Container:30\",\r\n\t\"type\": \"ccoc.mon.docker.container\",\r\n\t\"cpu\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": [{\r\n\t\t\t\"name\": \"cpu0\",\r\n\t\t\t\"usage_total\": 149510349149\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu1\",\r\n\t\t\t\"usage_total\": 150628581025\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu2\",\r\n\t\t\t\"usage_total\": 149062144967\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu3\",\r\n\t\t\t\"usage_total\": 119866812052\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu4\",\r\n\t\t\t\"usage_total\": 152174486019\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu5\",\r\n\t\t\t\"usage_total\": 149801986931\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu6\",\r\n\t\t\t\"usage_total\": 150837678672\r\n\t\t}, {\r\n\t\t\t\"name\": \"cpu7\",\r\n\t\t\t\"usage_total\": 152962823743\r\n\t\t}]\r\n\t},\r\n\t\"cpu_total\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"throttling_periods\": 0,\r\n\t\t\t\"throttling_throttled_periods\": 0,\r\n\t\t\t\"throttling_throttled_time\": 0,\r\n\t\t\t\"usage_in_kernelmode\": 559870000000,\r\n\t\t\t\"usage_in_usermode\": 567440000000,\r\n\t\t\t\"usage_percent\": 0,\r\n\t\t\t\"usage_system\": 16234260960000000,\r\n\t\t\t\"usage_total\": 1174844862558\r\n\t\t}\r\n\t},\r\n\t\"host\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Host:lab1worker2\"\r\n\t},\r\n\t\"image\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"sha256\"\r\n\t},\r\n\t\"k8s_id\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"postgres\"\r\n\t},\r\n\t\"k8s_namespace\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"ccoc\"\r\n\t},\r\n\t\"k8s_pod\": {\r\n\t\t\"type\": \"Relationship\",\r\n\t\t\"object\": \"urn:ngsi-ld:Mon.Pod:postgres-68ff7ccc59-fk4wc\"\r\n\t},\r\n\t\"memory\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"active_anon\": 12206080,\r\n\t\t\t\"active_file\": 11251712,\r\n\t\t\t\"cache\": 32673792,\r\n\t\t\t\"hierarchical_memory_limit\": 4294967296,\r\n\t\t\t\"inactive_anon\": 11558912,\r\n\t\t\t\"inactive_file\": 593920,\r\n\t\t\t\"limit\": 4294967296,\r\n\t\t\t\"mapped_file\": 23113728,\r\n\t\t\t\"max_usage\": 114823168,\r\n\t\t\t\"pgfault\": 111059949,\r\n\t\t\t\"pgmajfault\": 66,\r\n\t\t\t\"pgpgin\": 69551922,\r\n\t\t\t\"pgpgout\": 69543296,\r\n\t\t\t\"rss\": 3170304,\r\n\t\t\t\"rss_huge\": 0,\r\n\t\t\t\"total_active_anon\": 12206080,\r\n\t\t\t\"total_active_file\": 11251712,\r\n\t\t\t\"total_cache\": 32673792,\r\n\t\t\t\"total_inactive_anon\": 11558912,\r\n\t\t\t\"total_inactive_file\": 593920,\r\n\t\t\t\"total_mapped_file\": 23113728,\r\n\t\t\t\"total_pgfault\": 111059949,\r\n\t\t\t\"total_pgmajfault\": 66,\r\n\t\t\t\"total_pgpgin\": 69551922,\r\n\t\t\t\"total_pgpgout\": 69543296,\r\n\t\t\t\"total_rss\": 3170304,\r\n\t\t\t\"total_rss_huge\": 0,\r\n\t\t\t\"total_unevictable\": 0,\r\n\t\t\t\"total_writeback\": 0,\r\n\t\t\t\"unevictable\": 0,\r\n\t\t\t\"usage\": 16711680,\r\n\t\t\t\"usage_percent\": 0.38909912109375,\r\n\t\t\t\"writeback\": 0\r\n\t\t}\r\n\t},\r\n\t\"name\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"k8s_postgres_postgres-68ff7ccc59-fk4wc_ccoc_31d4e8a5-9556-4009-b8d7-4ba14995895e_0\"\r\n\t},\r\n\t\"network\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": []\r\n\t},\r\n\t\"storage\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"io_merged_recursive_async\": 1073,\r\n\t\t\t\"io_merged_recursive_read\": 46,\r\n\t\t\t\"io_merged_recursive_sync\": 46,\r\n\t\t\t\"io_merged_recursive_total\": 1119,\r\n\t\t\t\"io_merged_recursive_write\": 1073,\r\n\t\t\t\"io_queue_recursive_async\": 0,\r\n\t\t\t\"io_queue_recursive_read\": 0,\r\n\t\t\t\"io_queue_recursive_sync\": 0,\r\n\t\t\t\"io_queue_recursive_total\": 0,\r\n\t\t\t\"io_queue_recursive_write\": 0,\r\n\t\t\t\"io_service_bytes_recursive_async\": 1804242944,\r\n\t\t\t\"io_service_bytes_recursive_read\": 26079232,\r\n\t\t\t\"io_service_bytes_recursive_sync\": 26230784,\r\n\t\t\t\"io_service_bytes_recursive_total\": 1830473728,\r\n\t\t\t\"io_service_bytes_recursive_write\": 1804394496,\r\n\t\t\t\"io_service_time_recursive_async\": 328985916690,\r\n\t\t\t\"io_service_time_recursive_read\": 3620324320,\r\n\t\t\t\"io_service_time_recursive_sync\": 3645591282,\r\n\t\t\t\"io_service_time_recursive_total\": 332631507972,\r\n\t\t\t\"io_service_time_recursive_write\": 329011183652,\r\n\t\t\t\"io_serviced_recursive_async\": 292692,\r\n\t\t\t\"io_serviced_recursive_read\": 1357,\r\n\t\t\t\"io_serviced_recursive_sync\": 1384,\r\n\t\t\t\"io_serviced_recursive_total\": 294076,\r\n\t\t\t\"io_serviced_recursive_write\": 292719,\r\n\t\t\t\"io_time_recursive\": 1997491130511,\r\n\t\t\t\"io_wait_time_async\": 33868841906,\r\n\t\t\t\"io_wait_time_read\": 833752867,\r\n\t\t\t\"io_wait_time_sync\": 951680504,\r\n\t\t\t\"io_wait_time_total\": 34820522410,\r\n\t\t\t\"io_wait_time_write\": 33986769543,\r\n\t\t\t\"name\": \"8:32\",\r\n\t\t\t\"sectors_recursive\": 3575144\r\n\t\t}\r\n\t},\r\n\t\"ngsi-ld:observedAt\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": \"2022-10-10T10:15:45.000Z\"\r\n\t},\r\n\t\"status\": {\r\n\t\t\"type\": \"Property\",\r\n\t\t\"value\": {\r\n\t\t\t\"container_status\": \"running\",\r\n\t\t\t\"exitcode\": 0,\r\n\t\t\t\"oomkilled\": false,\r\n\t\t\t\"pid\": 27777,\r\n\t\t\t\"started_at\": 1663341802691442000,\r\n\t\t\t\"uptime_ns\": 2055140123219736\r\n\t\t}\r\n\t}\r\n}]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/upsert",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"upsert"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:1\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:2\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:3\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:4\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:5\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:6\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:7\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:8\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:9\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:10\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:11\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:12\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:13\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:14\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:15\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:16\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:17\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:18\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:19\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:20\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:21\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:22\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:23\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:24\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:25\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:26\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:27\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:28\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:29\",\r\n    \"tenanttest:urn:ngsi-ld:Mon.Container:30\"\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type Subscription with batch create",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:mytest33\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(1);\r",
																	"                notification = value[0].body;\r",
																	"                headers = value[0].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(21);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 21; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity1\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity2\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity3\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity4\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity5\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity6\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity7\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity8\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity9\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity10\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity12\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity13\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity14\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity15\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity16\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity17\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity18\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity19\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity20\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity21\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"tenanttest:urn:test:testentity0\",\r\n    \"tenanttest:urn:test:testentity1\",\r\n    \"tenanttest:urn:test:testentity2\",\r\n    \"tenanttest:urn:test:testentity3\",\r\n    \"tenanttest:urn:test:testentity4\",\r\n    \"tenanttest:urn:test:testentity5\",\r\n    \"tenanttest:urn:test:testentity6\",\r\n    \"tenanttest:urn:test:testentity7\",\r\n    \"tenanttest:urn:test:testentity8\",\r\n    \"tenanttest:urn:test:testentity9\",\r\n    \"tenanttest:urn:test:testentity10\",\r\n    \"tenanttest:urn:test:testentity12\",\r\n    \"tenanttest:urn:test:testentity13\",\r\n    \"tenanttest:urn:test:testentity14\",\r\n    \"tenanttest:urn:test:testentity15\",\r\n    \"tenanttest:urn:test:testentity16\",\r\n    \"tenanttest:urn:test:testentity17\",\r\n    \"tenanttest:urn:test:testentity18\",\r\n    \"tenanttest:urn:test:testentity19\",\r\n    \"tenanttest:urn:test:testentity20\",\r\n    \"tenanttest:urn:test:testentity21\"\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type Subscription with batch create partial fail",
											"item": [
												{
													"name": "Create Duplicate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:mytestfailtest1\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"\r",
																	"var entityIds = new Array();\r",
																	"payloadBody.forEach(function (value){\r",
																	"    entityIds.push(value.id);\r",
																	"});\r",
																	"pm.collectionVariables.set(\"entityIds\", entityIds);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 207\", function () {\r",
																	"    pm.response.to.have.status(207);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.eql(1);\r",
																	"                notification = value[0].body;\r",
																	"                headers = value[0].headers;\r",
																	"                pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                pm.expect(notification).to.have.property(\"id\");\r",
																	"                pm.expect(notification.data.length).to.eql(20);\r",
																	"                notification.data.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                payloadBody.sort(function(a, b) {\r",
																	"                    if(a.id < b.id){\r",
																	"                        return -1;\r",
																	"                    }else {\r",
																	"                        return 1;\r",
																	"                    }\r",
																	"                });\r",
																	"                for(let i = 0; i < 20; i++){\r",
																	"                    var notificationData = notification.data[i];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody[i]));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(payloadBody[i+1]);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity0\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity1\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity2\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity3\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity4\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity5\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity6\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity7\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity8\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity9\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity10\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity12\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity13\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity14\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity15\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity16\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity17\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity18\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity19\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity20\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    },\r\n    {\r\n        \"id\": \"tenanttest:urn:test:testentity21\",\r\n        \"type\": \"TestType\",\r\n        \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n        \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n        \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n        \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n        \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n    }\r\n\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"tenanttest:urn:test:testentity0\",\r\n    \"tenanttest:urn:test:testentity1\",\r\n    \"tenanttest:urn:test:testentity2\",\r\n    \"tenanttest:urn:test:testentity3\",\r\n    \"tenanttest:urn:test:testentity4\",\r\n    \"tenanttest:urn:test:testentity5\",\r\n    \"tenanttest:urn:test:testentity6\",\r\n    \"tenanttest:urn:test:testentity7\",\r\n    \"tenanttest:urn:test:testentity8\",\r\n    \"tenanttest:urn:test:testentity9\",\r\n    \"tenanttest:urn:test:testentity10\",\r\n    \"tenanttest:urn:test:testentity12\",\r\n    \"tenanttest:urn:test:testentity13\",\r\n    \"tenanttest:urn:test:testentity14\",\r\n    \"tenanttest:urn:test:testentity15\",\r\n    \"tenanttest:urn:test:testentity16\",\r\n    \"tenanttest:urn:test:testentity17\",\r\n    \"tenanttest:urn:test:testentity18\",\r\n    \"tenanttest:urn:test:testentity19\",\r\n    \"tenanttest:urn:test:testentity20\",\r\n    \"tenanttest:urn:test:testentity21\"\r\n]",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Q Subscription",
											"item": [
												{
													"name": "Equal Property",
													"item": [
														{
															"name": "Create Subscription With Id No Context",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"var subId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"subId\", subId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:mytest2\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"stringproperty==\\\"trigger\\\"\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
																},
																"url": {
																	"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
																	"host": [
																		"{{subscription-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"subscriptions"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity Trigger Notification",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"entityId\", entityId);\r",
																			"var subId = pm.collectionVariables.get(\"subId\");\r",
																			"\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"setTimeout(function(){\r",
																			"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																			"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																			"            pm.test(\"Check for notification\", function () {\r",
																			"            var value = response.json();\r",
																			"            console.log(\"Retrieving notifications from testserver\")\r",
																			"            console.log(notificationServer + \"/\" + subId)\r",
																			"            console.log(value);\r",
																			"            pm.expect(value.length).to.eql(1);\r",
																			"            notification = value[0].body;\r",
																			"            headers = value[0].headers;\r",
																			"            pm.expect(notification.type).to.eql(\"Notification\");\r",
																			"            pm.expect(notification).to.have.property(\"id\");\r",
																			"            pm.expect(notification.data.length).to.eql(1);\r",
																			"            var notificationData = notification.data[0];\r",
																			"            delete notificationData[\"createdAt\"];\r",
																			"            delete notificationData[\"modifiedAt\"];\r",
																			"            console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																			"            console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																			"            pm.expect(notificationData).to.eql(payloadBody);\r",
																			"            });\r",
																			"        });\r",
																			"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																			"}, 3000);\r",
																			"    \r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"trigger\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity No Trigger",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"entityId\", entityId);\r",
																			"var subId = pm.collectionVariables.get(\"subId\");\r",
																			"\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"setTimeout(function(){\r",
																			"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																			"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																			"            pm.test(\"Check for notification\", function () {\r",
																			"            var value = response.json();\r",
																			"            console.log(\"Retrieving notifications from testserver\")\r",
																			"            console.log(notificationServer + \"/\" + subId)\r",
																			"            console.log(value);\r",
																			"            pm.expect(value.length).to.eql(1);\r",
																			"            });\r",
																			"        });\r",
																			"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																			"}, 3000);\r",
																			"    \r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity No Trigger",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Subcription",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
																	"host": [
																		"{{subscription-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"subscriptions",
																		"{{subId}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Equal Relationship",
													"item": [
														{
															"name": "Create Subscription With Id No Context",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"var subId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"subId\", subId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:mytest3\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"q\": \"testref==urn:mytest1\",\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
																},
																"url": {
																	"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
																	"host": [
																		"{{subscription-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"subscriptions"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity Trigger Notification",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"entityId\", entityId);\r",
																			"var subId = pm.collectionVariables.get(\"subId\");\r",
																			"\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"setTimeout(function(){\r",
																			"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																			"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																			"            pm.test(\"Check for notification\", function () {\r",
																			"            var value = response.json();\r",
																			"            console.log(\"Retrieving notifications from testserver\")\r",
																			"            console.log(notificationServer + \"/\" + subId)\r",
																			"            console.log(value);\r",
																			"            pm.expect(value.length).to.eql(1);\r",
																			"            notification = value[0].body;\r",
																			"            headers = value[0].headers;\r",
																			"            pm.expect(notification.type).to.eql(\"Notification\");\r",
																			"            pm.expect(notification).to.have.property(\"id\");\r",
																			"            pm.expect(notification.data.length).to.eql(1);\r",
																			"            var notificationData = notification.data[0];\r",
																			"            delete notificationData[\"createdAt\"];\r",
																			"            delete notificationData[\"modifiedAt\"];\r",
																			"            console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																			"            console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																			"            pm.expect(notificationData).to.eql(payloadBody);\r",
																			"            });\r",
																			"        });\r",
																			"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																			"}, 3000);\r",
																			"    \r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"trigger\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testref\": {\"type\": \"Relationship\", \"object\": \"urn:mytest1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity No Trigger",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"entityId\", entityId);\r",
																			"var subId = pm.collectionVariables.get(\"subId\");\r",
																			"\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"setTimeout(function(){\r",
																			"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																			"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																			"            pm.test(\"Check for notification\", function () {\r",
																			"            var value = response.json();\r",
																			"            console.log(\"Retrieving notifications from testserver\")\r",
																			"            console.log(notificationServer + \"/\" + subId)\r",
																			"            console.log(value);\r",
																			"            pm.expect(value.length).to.eql(1);\r",
																			"            });\r",
																			"        });\r",
																			"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																			"}, 3000);\r",
																			"    \r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity No Trigger",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Subcription",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
																	"host": [
																		"{{subscription-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"subscriptions",
																		"{{subId}}"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Trigger geoQuery",
											"item": [
												{
													"name": "Near",
													"item": [
														{
															"name": "Create Subscription With Id No Context",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"var subId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"subId\", subId);\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:storeSubscription3\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"geoQ\": {\"geoproperty\":\"location\", \"georel\":\"near;maxDistance==1500\",\"geometry\":\"Point\",\"coordinates\":[80,80]},\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
																},
																"url": {
																	"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
																	"host": [
																		"{{subscription-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"subscriptions"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity Trigger Notification",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"entityId\", entityId);\r",
																			"var subId = pm.collectionVariables.get(\"subId\");\r",
																			"\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"setTimeout(function(){\r",
																			"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																			"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																			"            pm.test(\"Check for notification\", function () {\r",
																			"            var value = response.json();\r",
																			"            console.log(\"Retrieving notifications from testserver\")\r",
																			"            console.log(notificationServer + \"/\" + subId)\r",
																			"            console.log(value);\r",
																			"            pm.expect(value.length).to.eql(1);\r",
																			"            notification = value[0].body;\r",
																			"            headers = value[0].headers;\r",
																			"            pm.expect(notification.type).to.eql(\"Notification\");\r",
																			"            pm.expect(notification).to.have.property(\"id\");\r",
																			"            pm.expect(notification.data.length).to.eql(1);\r",
																			"            var notificationData = notification.data[0];\r",
																			"            delete notificationData[\"createdAt\"];\r",
																			"            delete notificationData[\"modifiedAt\"];\r",
																			"            console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																			"            console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																			"            pm.expect(notificationData).to.eql(payloadBody);\r",
																			"            });\r",
																			"        });\r",
																			"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																			"}, 3000);\r",
																			"    \r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"tenanttest:urn:ngsi-ld:test3\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [80, 80.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Create Simple Entity No Trigger",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																			"console.log(payloadBody.id);\r",
																			"var entityId = payloadBody.id;\r",
																			"pm.collectionVariables.set(\"entityId\", entityId);\r",
																			"var subId = pm.collectionVariables.get(\"subId\");\r",
																			"\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"pm.test(\"Check location header\", function () {\r",
																			"    pm.response.to.have.header(\"Location\");\r",
																			"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																			"});\r",
																			"setTimeout(function(){\r",
																			"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																			"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																			"            pm.test(\"Check for notification\", function () {\r",
																			"            var value = response.json();\r",
																			"            console.log(\"Retrieving notifications from testserver\")\r",
																			"            console.log(notificationServer + \"/\" + subId)\r",
																			"            console.log(value);\r",
																			"            pm.expect(value.length).to.eql(1);\r",
																			"            });\r",
																			"        });\r",
																			"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																			"}, 3000);\r",
																			"    \r",
																			"\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "default"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json",
																		"type": "default",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n   \t\"id\": \"tenanttest:urn:ngsi-ld:test4\",\r\n   \t\"type\": \"TestType\",\r\n    \"location\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": { \r\n        \t\"type\": \"Point\", \r\n        \t\"coordinates\": [50, 50.0005] \r\n        }\r\n    },\r\n   \t\"name\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": \"MERCEDES\"\r\n   \t},\r\n    \"speed\": {\r\n       \t\"type\": \"Property\",\r\n       \t\"value\": 60\r\n   \t},\r\n    \"owner\": {\"type\": \"Relationship\", \"object\": \"urn:testref\"}\r\n\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Entity No Trigger",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
																	"host": [
																		"{{entity-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"entities",
																		"{{entityId}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Subcription",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			"pm.collectionVariables.clear();"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "NGSILD-Tenant",
																		"value": "testtenant",
																		"type": "default"
																	}
																],
																"url": {
																	"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
																	"host": [
																		"{{subscription-manager}}"
																	],
																	"path": [
																		"ngsi-ld",
																		"v1",
																		"subscriptions",
																		"{{subId}}"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Trigger watchedAttrs",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:Subscription:mytest6\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\"\r\n   \t\t}\r\n\t],\r\n    \"watchedAttributes\": [\"mywatchedprop\"],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity Trigger Notification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"            var value = response.json();\r",
																	"            console.log(\"Retrieving notifications from testserver\")\r",
																	"            console.log(notificationServer + \"/\" + subId)\r",
																	"            console.log(value);\r",
																	"            pm.expect(value.length).to.eql(1);\r",
																	"            notification = value[0].body;\r",
																	"            headers = value[0].headers;\r",
																	"            pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"            pm.expect(notification).to.have.property(\"id\");\r",
																	"            pm.expect(notification.data.length).to.eql(1);\r",
																	"            var notificationData = notification.data[0];\r",
																	"            delete notificationData[\"createdAt\"];\r",
																	"            delete notificationData[\"modifiedAt\"];\r",
																	"            console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																	"            console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"            pm.expect(notificationData).to.eql(payloadBody);\r",
																	"            });\r",
																	"        });\r",
																	"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"mywatchedprop\": {\"type\": \"Property\", \"value\": \"trigger\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testref\": {\"type\": \"Relationship\", \"object\": \"urn:mytest1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Trigger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"            var value = response.json();\r",
																	"            console.log(\"Retrieving notifications from testserver\")\r",
																	"            console.log(notificationServer + \"/\" + subId)\r",
																	"            console.log(value);\r",
																	"            pm.expect(value.length).to.eql(1);\r",
																	"            });\r",
																	"        });\r",
																	"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"tenanttest:urn:test:testentity2\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity No Trigger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Interval Subscription",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": " {\r\n        \"id\": \"tenanttest:urn:ngsi-ld:Vehicle:A500\",\r\n        \"type\": \"Vehicle\",\r\n        \"brandName\": {\r\n            \"type\": \"Property\",\r\n            \"value\": \"Mercedes\"\r\n        },\r\n        \"speed\": {\r\n            \"type\": \"Property\",\r\n            \"value\": 80\r\n        }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"var created = pm.collectionVariables.get(\"created\");\r",
																	"var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"console.log(notificationServer + \"/\" + subId)\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});\r",
																	"setTimeout(function(){\r",
																	"    \r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.greaterThan(2);\r",
																	"                for(let i=0; i < 3; i++){\r",
																	"                    notification = value[i].body;\r",
																	"                    headers = value[i].headers;\r",
																	"                    pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                    pm.expect(notification).to.have.property(\"id\");\r",
																	"                    pm.expect(notification.data.length).to.eql(1);\r",
																	"                    var notificationData = notification.data[0];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(created);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"    }, 15000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"id\": \"tenanttest:urn:ngsi-ld:Subscription:withTimeInterval\",\r\n  \"type\": \"Subscription\",\r\n  \"entities\": [{\"type\": \"Vehicle\"}],\r\n  \"timeInterval\": 5,\r\n  \"throttling\": 0,\r\n  \"notification\": {\r\n    \"format\": \"normalized\",\r\n    \"attributes\": [\"speed\", \"brandName\"],\r\n    \"endpoint\": {\r\n      \"uri\": \"{{notificationserver}}\",\r\n      \"accept\": \"application/json\"\r\n    }\r\n  }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Interval Subscription with context in Link",
											"item": [
												{
													"name": "Create Simple Entity Context in Link",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://fiware.github.io/data-models/full-context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": " {\r\n        \"id\": \"tenanttest:urn:ngsi-ld:Vehicle:A500\",\r\n        \"type\": \"Vehicle\",\r\n        \"brandName\": {\r\n            \"type\": \"Property\",\r\n            \"value\": \"Mercedes\"\r\n        },\r\n        \"speed\": {\r\n            \"type\": \"Property\",\r\n            \"value\": 80\r\n        }\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"var created = pm.collectionVariables.get(\"created\");\r",
																	"var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"console.log(notificationServer + \"/\" + subId)\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});\r",
																	"setTimeout(function(){\r",
																	"    \r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"                var value = response.json();\r",
																	"                console.log(\"Retrieving notifications from testserver\")\r",
																	"                console.log(notificationServer + \"/\" + subId)\r",
																	"                console.log(value);\r",
																	"                pm.expect(value.length).to.greaterThan(2);\r",
																	"                for(let i=0; i < 3; i++){\r",
																	"                    notification = value[i].body;\r",
																	"                    headers = value[i].headers;\r",
																	"                    pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"                    pm.expect(notification).to.have.property(\"id\");\r",
																	"                    pm.expect(notification.data.length).to.eql(1);\r",
																	"                    var notificationData = notification.data[0];\r",
																	"                    delete notificationData[\"createdAt\"];\r",
																	"                    delete notificationData[\"modifiedAt\"];\r",
																	"                    console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																	"                    console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"                    pm.expect(notificationData).to.eql(created);\r",
																	"                }\r",
																	"            });\r",
																	"        });\r",
																	"    }, 15000);\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://fiware.github.io/data-models/full-context.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"id\": \"tenanttest:urn:ngsi-ld:Subscription:withTimeInterval123\",\r\n  \"type\": \"Subscription\",\r\n  \"entities\": [{\"type\": \"Vehicle\"}],\r\n  \"timeInterval\": 5,\r\n  \"throttling\": 0,\r\n  \"notification\": {\r\n    \"format\": \"normalized\",\r\n    \"attributes\": [\"speed\", \"brandName\"],\r\n    \"endpoint\": {\r\n      \"uri\": \"{{notificationserver}}\",\r\n      \"accept\": \"application/json\"\r\n    }\r\n  }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Trigger Type IdPattern Subscription",
											"item": [
												{
													"name": "Create Subscription With Id No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"var subId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"subId\", subId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(subId);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenant:urn:ngsi-ld:Subscription:mytest1888\",\r\n   \t\"type\": \"Subscription\",\r\n   \t\"entities\": [\r\n\t\t{\r\n\t\t\t\"type\": \"TestType\",\r\n            \"idPattern\": \".*\"\r\n   \t\t},\r\n           {\r\n\t\t\t\"type\": \"TestType2\",\r\n            \"idPattern\": \"myprefix.*\"\r\n   \t\t}\r\n\t],\r\n    \"notification\": {\r\n       \t\"format\": \"normalized\",\r\n       \t\"endpoint\": {\r\n          \t\"uri\": \"{{notificationserver}}\",\r\n          \t\"accept\": \"application/json\"\r\n       \t}\r\n    }\r\n}\r\n\r\n"
														},
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context No Trigger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"            var value = response.json();\r",
																	"            console.log(\"Retrieving notifications from testserver\")\r",
																	"            console.log(notificationServer + \"/\" + subId)\r",
																	"            console.log(value);\r",
																	"            pm.expect(value.length).to.eql(0);\r",
																	"            });\r",
																	"        });\r",
																	"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															},
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"test:testentity1\",\r\n    \"type\": \"TestType2\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Entity No Context Trigger",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"var subId = pm.collectionVariables.get(\"subId\");\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"setTimeout(function(){\r",
																	"    var notificationServer = pm.environment.get(\"notificationserver-external\");\r",
																	"    pm.sendRequest(notificationServer + \"/\" + subId, function (err, response) {\r",
																	"            pm.test(\"Check for notification\", function () {\r",
																	"            var value = response.json();\r",
																	"            console.log(\"Retrieving notifications from testserver\")\r",
																	"            console.log(notificationServer + \"/\" + subId)\r",
																	"            console.log(value);\r",
																	"            pm.expect(value.length).to.eql(1);\r",
																	"            notification = value[0].body;\r",
																	"            headers = value[0].headers;\r",
																	"            pm.expect(notification.type).to.eql(\"Notification\");\r",
																	"            pm.expect(notification).to.have.property(\"id\");\r",
																	"            pm.expect(notification.data.length).to.eql(1);\r",
																	"            var notificationData = notification.data[0];\r",
																	"            delete notificationData[\"createdAt\"];\r",
																	"            delete notificationData[\"modifiedAt\"];\r",
																	"            console.log(\"expected notification: \" + JSON.stringify(payloadBody));\r",
																	"            console.log(\"received notification: \" + JSON.stringify(notificationData));\r",
																	"            pm.expect(notificationData).to.eql(payloadBody);\r",
																	"            });\r",
																	"        });\r",
																	"        //pm.sendRequest(notificationServer + \"/deleteAll\", function(err, response){});\r",
																	"}, 3000);\r",
																	"    \r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															},
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"myprefixurn:test:testentity2\",\r\n    \"type\": \"TestType2\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Subcription",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{subscription-manager}}/ngsi-ld/v1/subscriptions/{{subId}}",
															"host": [
																"{{subscription-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"subscriptions",
																"{{subId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/myprefixurn:test:testentity2",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"myprefixurn:test:testentity2"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/test:testentity1",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"test:testentity1"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "/csourceRegistrations",
							"item": [
								{
									"name": "Registration Create Tests",
									"item": [
										{
											"name": "No Context",
											"item": [
												{
													"name": "Create Simple Registry Entry No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var cSourceId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"cSourceId\", cSourceId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(cSourceId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:ContextSourceRegistration:csr1a3456\",\r\n\t\"type\": \"ContextSourceRegistration\",\r\n\t\"information\": [{\r\n\t\t\t\"entities\": [{\r\n\t\t\t\t\"type\": \"Test2\"\r\n\t\t\t}]\r\n\t\t}\r\n\t],\r\n\t\"endpoint\": \"http://localhost:9080\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get created registration and validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + expected);\r",
																	"    console.log(\"Received: \" + jsonData);\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceId}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete registration",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceId}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Context In Body",
											"item": [
												{
													"name": "Create simple registration with @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var cSourceId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"cSourceId\", cSourceId);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[\"@context\"][0]);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(cSourceId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:ContextSourceRegistration:csr1a3456\",\r\n\t\"type\": \"ContextSourceRegistration\",\r\n\t\"information\": [{\r\n\t\t\t\"entities\": [{\r\n\t\t\t\t\"type\": \"Test2\"\r\n\t\t\t}]\r\n\t\t}\r\n\t],\r\n\t\"endpoint\": \"http://localhost:9080\",\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get created registration and validate",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"Received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceId}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete registration",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceId}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Context in Link",
											"item": [
												{
													"name": "Create Simple Regisration With @context in link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var cSourceId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"cSourceId\", cSourceId);\r",
																	"pm.collectionVariables.set(\"link\", pm.request.headers.get(\"Link\"));\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(cSourceId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:ContextSourceRegistration:csr1a3456\",\r\n\t\"type\": \"ContextSourceRegistration\",\r\n\t\"information\": [{\r\n\t\t\t\"entities\": [{\r\n\t\t\t\t\"type\": \"Test2\"\r\n\t\t\t}]\r\n\t\t}\r\n\t],\r\n\t\"endpoint\": \"http://localhost:9080\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Created Registration and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"var expectedLink = pm.collectionVariables.get(\"link\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});\r",
																	"pm.test(\"Validate Link header\", function () {\r",
																	"    var headers = pm.response.headers.all();\r",
																	"    var links = []\r",
																	"    headers.forEach(function(itm, idx){\r",
																	"        if(itm.key == \"Link\"){\r",
																	"            links.push(itm.value);\r",
																	"        }\r",
																	"    });\r",
																	"    console.log(\"expected Link: \" + expectedLink);\r",
																	"    console.log(\"received Links: \" + links);\r",
																	"    pm.expect(links).to.include(expectedLink);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Link",
																"value": "{{link}}",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceId}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceId}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Registration Queries",
									"item": [
										{
											"name": "Type",
											"item": [
												{
													"name": "Create Simple Registry Entry TBF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var cSourceId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"cSourceIdTBF\", cSourceId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(cSourceId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:ContextSourceRegistration:csr1a3456\",\r\n\t\"type\": \"ContextSourceRegistration\",\r\n\t\"information\": [{\r\n\t\t\t\"entities\": [{\r\n\t\t\t\t\"type\": \"Test2\"\r\n\t\t\t}]\r\n\t\t}\r\n\t],\r\n\t\"endpoint\": \"http://localhost:9080\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Simple Registry Entry TBNF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var cSourceId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"createdTBNF\", payloadBody);\r",
																	"pm.collectionVariables.set(\"cSourceIdTBNF\", cSourceId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(cSourceId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"id\": \"tenanttest:urn:ngsi-ld:ContextSourceRegistration:csr1a34561\",\r\n\t\"type\": \"ContextSourceRegistration\",\r\n\t\"information\": [{\r\n\t\t\t\"entities\": [{\r\n\t\t\t\t\"type\": \"Test3\"\r\n\t\t\t}]\r\n\t\t}\r\n\t],\r\n\t\"endpoint\": \"http://localhost:9080\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get created registration and validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Validate that result on contains registry to be found\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.length).to.eql(1);\r",
																	"    pm.expect(jsonData[0]).to.eql(pm.collectionVariables.get(\"createdTBF\"));\r",
																	"    pm.expect(jsonData[0]).to.not.eql(pm.collectionVariables.get(\"createdTBNF\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations?type=Test2",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations"
															],
															"query": [
																{
																	"key": "type",
																	"value": "Test2"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete registration TBF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceIdTBF}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceIdTBF}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete registration TBNF",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{registry-manager}}/ngsi-ld/v1/csourceRegistrations/{{cSourceIdTBNF}}",
															"host": [
																"{{registry-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"csourceRegistrations",
																"{{cSourceIdTBNF}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "/csourceSubscriptions",
							"item": []
						},
						{
							"name": "/temporal/entities",
							"item": []
						},
						{
							"name": "/entityOperations",
							"item": [
								{
									"name": "Batch entity create test",
									"item": [
										{
											"name": "no @context",
											"item": [
												{
													"name": "Create batch entity with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId2\", entityId2);\r",
																	"\r",
																	"var response = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response validations\", function () {\r",
																	"     pm.expect(entityId1).to.equal(response[0]);\r",
																	"     pm.expect(entityId2).to.equal(response[1]);\r",
																	"}); \r",
																	"\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  },\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "get batch entity with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"  var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"Received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});\r",
																	" \r",
																	" pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	" \r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"type\": \"Query\",\r\n    \"entities\": [\r\n        {\r\n            \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n            \"type\": \"TestType\"\r\n        },\r\n        {\r\n            \"id\": \"tenanttest:urn:test:testbatchentity1006\",\r\n            \"type\": \"TestType\"\r\n        }\r\n    ]\r\n}"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/query",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"query"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete batch entity with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"{{entityId1}}\",\r\n    \"{{entityId2}}\"\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in body",
											"item": [
												{
													"name": "Create batch entity with  @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId2\", entityId2);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[0][\"@context\"]);\r",
																	"pm.collectionVariables.set(\"@context\", payloadBody[1][\"@context\"]);\r",
																	"var response = pm.response.json();\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207]);\r",
																	"});\r",
																	"pm.test(\"Response validations\", function () {\r",
																	"     pm.expect(entityId1).to.equal(response[0]);\r",
																	"     pm.expect(entityId2).to.equal(response[1]);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/ld+json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n     \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  },\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n     \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "get batch entity with  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	" var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	" \r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"type\": \"Query\",\r\n    \"entities\": [\r\n        {\r\n            \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n            \"type\": \"TestType\"\r\n        },\r\n        {\r\n            \"id\": \"tenanttest:urn:test:testbatchentity1006\",\r\n            \"type\": \"TestType\"\r\n        }\r\n    ],\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/query",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"query"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete batch entity with  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"{{entityId1}}\",\r\n    \"{{entityId2}}\"\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Batch entity upsert test",
									"item": [
										{
											"name": "no @context",
											"item": [
												{
													"name": "Create batch entity with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId2\", entityId2);\r",
																	"var response = pm.response.json();\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207]);\r",
																	"    \r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response validations\", function () {\r",
																	"     pm.expect(entityId1).to.equal(response[0]);\r",
																	"     pm.expect(entityId2).to.equal(response[1]);\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  },\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "upsert batch entity with no  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId3\", entityId2);\r",
																	"var response = pm.response.json();\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207,204]);\r",
																	"});\r",
																	"pm.test(\"Response validations\", function () {\r",
																	"     pm.expect(entityId1).to.equal(response[0]);\r",
																	"     pm.expect(entityId2).to.equal(response[1]);\r",
																	"});\r",
																	" \r",
																	" "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststringdata\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 482},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 259.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  },\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1007\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/upsert",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"upsert"
															]
														}
													},
													"response": []
												},
												{
													"name": "get batch entity with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"   var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"type\": \"Query\",\r\n    \"entities\": [\r\n        {\r\n            \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n            \"type\": \"TestType\"\r\n        },\r\n        {\r\n            \"id\": \"tenanttest:urn:test:testbatchentity1006\",\r\n            \"type\": \"TestType\"\r\n        },\r\n        {\r\n            \"id\": \"tenanttest:urn:test:testbatchentity1007\",\r\n            \"type\": \"TestType\"\r\n        }\r\n    ]\r\n}"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/query",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"query"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete batch entity with no @context Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"{{entityId1}}\",\r\n    \"{{entityId2}}\",\r\n    \"{{entityId3}}\"\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in body",
											"item": [
												{
													"name": "Create batch entity with  @context in body Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId2\", entityId2);\r",
																	"pm.collectionVariables.set(\"@context1\", payloadBody[0][\"@context\"]);\r",
																	"pm.collectionVariables.set(\"@context2\", payloadBody[1][\"@context\"]);\r",
																	"var response = pm.response.json();\r",
																	"pm.test(\"Validate response\", function () {\r",
																	"    pm.expect(entityId1).to.eql(response[0]);\r",
																	"    pm.expect(entityId2).to.eql(response[1]);\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207]);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n     \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  },\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n     \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "upsert batch entity with  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId3\", entityId2);\r",
																	"var response = pm.response.json();\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207,204]);\r",
																	"});\r",
																	"pm.test(\"Validate response\", function () {\r",
																	"    pm.expect(entityId1).to.eql(response[0]);\r",
																	"    pm.expect(entityId2).to.eql(response[1]);\r",
																	"});\r",
																	" \r",
																	" "
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststringdata\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 265},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 302.580},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n     \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  },\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1007\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n     \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/upsert",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"upsert"
															]
														}
													},
													"response": []
												},
												{
													"name": "get batch entity with  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	" var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"type\": \"Query\",\r\n    \"entities\": [\r\n        {\r\n            \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n            \"type\": \"TestType\"\r\n        },\r\n        {\r\n            \"id\": \"tenanttest:urn:test:testbatchentity1006\",\r\n            \"type\": \"TestType\"\r\n        }\r\n    ],\"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/query",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"query"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete batch entity with  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"{{entityId1}}\",\r\n    \"{{entityId2}}\",\r\n    \"{{entityId3}}\"\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Batch entity update test",
									"item": [
										{
											"name": "no @context",
											"item": [
												{
													"name": "Create batch entity with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId2\", entityId2);\r",
																	"var response = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response validations\", function () {\r",
																	"     pm.expect(entityId1).to.equal(response[0]);\r",
																	"     pm.expect(entityId2).to.equal(response[1]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"Created\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  },\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "update batch entity with no @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([204, 207]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"No Content\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"StringDATA\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 586},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 482.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref3\"}\r\n  },\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"ValueData\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 896},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 300.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref8\"}\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/update",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"update"
															]
														}
													},
													"response": []
												},
												{
													"name": "get batch entity with no @context Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"  var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + JSON.stringify(expected));\r",
																	"    console.log(\"Received: \" + JSON.stringify(jsonData));\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});\r",
																	" \r",
																	" pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	" \r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"type\": \"Query\",\r\n    \"entities\": [\r\n        {\r\n            \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n            \"type\": \"TestType\"\r\n        },\r\n        {\r\n            \"id\": \"tenanttest:urn:test:testbatchentity1006\",\r\n            \"type\": \"TestType\"\r\n        }\r\n    ]\r\n}"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/query",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"query"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete batch entity with no @context Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"{{entityId1}}\",\r\n    \"{{entityId2}}\"\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "@context in body",
											"item": [
												{
													"name": "Create batch entity with  @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId1\", entityId1);\r",
																	"pm.collectionVariables.set(\"entityId2\", entityId2);\r",
																	"var response = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([201, 207]);\r",
																	"});\r",
																	"pm.test(\"Response validations\", function () {\r",
																	"     pm.expect(entityId1).to.equal(response[0]);\r",
																	"     pm.expect(entityId2).to.equal(response[1]);\r",
																	"});\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"  \r",
																	" \r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"StringDATA\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 586},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 482.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref3\"},\"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  },\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"ValueData\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 896},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 300.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref8\"},\"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/create",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"create"
															]
														}
													},
													"response": []
												},
												{
													"name": "update batch entity with @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody[0].id);\r",
																	"console.log(payloadBody[1].id);\r",
																	"var entityId1 = payloadBody[0].id;\r",
																	"var entityId2 = payloadBody[1].id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"\r",
																	"\r",
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([204, 207]);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Status code name has string\", function () {\r",
																	"    pm.response.to.have.status(\"No Content\");\r",
																	"});\r",
																	"\r",
																	"  \r",
																	"   \r",
																	" \r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"StringDATA\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 586},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 482.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref3\"},\"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  },\r\n  {\r\n    \"id\": \"tenanttest:urn:test:testbatchentity1006\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"ValueData\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 896},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 300.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref8\"},\"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n  }\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/update",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"update"
															]
														}
													},
													"response": []
												},
												{
													"name": "get batch entity with  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	" var expected = pm.collectionVariables.get(\"created\");\r",
																	" var context = pm.collectionVariables.get(\"@context\");\r",
																	" console.log(\"cotext :: \"+ context);\r",
																	"  pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	" pm.test(\"Content-Type is present\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\");\r",
																	"});\r",
																	" \r",
																	"\r",
																	" \r",
																	"\r",
																	"\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															},
															{
																"key": "Link",
																"value": "<{{@context}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"',",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"type\": \"Query\",\r\n    \"entities\": [\r\n        {\r\n            \"id\": \"tenanttest:urn:test:testbatchentity1005\",\r\n            \"type\": \"TestType\"\r\n        },\r\n        {\r\n            \"id\": \"tenanttest:urn:test:testbatchentity1006\",\r\n            \"type\": \"TestType\"\r\n        }\r\n    ],\r\n    \"@context\": [\"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\", \"https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.3.jsonld\"]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/query",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"query"
															]
														}
													},
													"response": []
												},
												{
													"name": "delete batch entity with  @context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "NGSILD-Tenant",
																"value": "testtenant",
																"type": "default"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\r\n    \"{{entityId1}}\",\r\n    \"{{entityId2}}\"\r\n]"
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entityOperations/delete",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entityOperations",
																"delete"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "/types",
							"item": []
						},
						{
							"name": "/attributes",
							"item": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Error Tests",
			"item": [
				{
					"name": "No Tenant",
					"item": [
						{
							"name": "/entities",
							"item": [
								{
									"name": "Entity Create Tests",
									"item": [
										{
											"name": "Reject entity create application/ld+json with no @context in body",
											"item": [
												{
													"name": "Create Simple Entity With no @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Validate that entity was not created",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Reject entity create application/ld+json with @context in Link Header",
											"item": [
												{
													"name": "Create Simple Entity With no @context in body",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															},
															{
																"key": "Link",
																"value": "<https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n    \"@context\": \"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Validate that entity was not created",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Reject entity create with none URI id",
											"item": [
												{
													"name": "Create Simple Entity With invalid id",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"notauri\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n    \"@context\": \"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Validate that entity was not created",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    //is 400 because no uri is a bad request\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Reject entity create with property which has no value",
											"item": [
												{
													"name": "Create Simple Entity With invalid property",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:mytest:1\",\r\n    \"type\": \"TestType\",\r\n    \"invalidproperty\": {\"type\": \"Property\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n    \"@context\": \"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Validate that entity was not created",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Reject entity create with relationship which has no object",
											"item": [
												{
													"name": "Create Simple Entity With invalid property",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/ld+json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															},
															{
																"key": "",
																"value": "",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:mytest:1\",\r\n    \"type\": \"TestType\",\r\n    \"invalidrelationship\": {\"type\": \"Relationship\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"},\r\n    \"@context\": \"https://raw.githubusercontent.com/ScorpioBroker/ScorpioBroker/new_ci/testcontext.json\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Validate that entity was not created",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Status code is 404\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Entity Partial Update Tests",
									"item": [
										{
											"name": "Reject change of type",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Created Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + expected);\r",
																	"    console.log(\"Received: \" + jsonData);\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Partial update try to change type",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"blub\", \"value\": 123456}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/intproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"intproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Validate no change in entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + expected);\r",
																	"    console.log(\"Received: \" + jsonData);\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Reject change object in property",
											"item": [
												{
													"name": "Create Simple Entity No Context",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var payloadBody = JSON.parse(pm.request.body.raw);\r",
																	"console.log(payloadBody.id);\r",
																	"var entityId = payloadBody.id;\r",
																	"pm.collectionVariables.set(\"created\", payloadBody);\r",
																	"pm.collectionVariables.set(\"entityId\", entityId);\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"pm.test(\"Check location header\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.expect(pm.response.headers.get(\"Location\")).to.include(entityId);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"id\": \"urn:test:testentity1\",\r\n    \"type\": \"TestType\",\r\n    \"stringproperty\": {\"type\": \"Property\", \"value\": \"teststring\"},\r\n    \"intproperty\": {\"type\": \"Property\", \"value\": 123},\r\n    \"floatproperty\": {\"type\": \"Property\", \"value\": 123.456},\r\n    \"complexproperty\": {\"type\": \"Property\", \"value\": {\"some\": {\"more\": \"values\"}}},\r\n    \"testrelationship\": {\"type\": \"Relationship\", \"object\": \"urn:testref1\"}\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities"
															]
														}
													},
													"response": []
												},
												{
													"name": "Get Created Entity and Validate content",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + expected);\r",
																	"    console.log(\"Received: \" + jsonData);\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Partial update try to change add object",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"\r",
																	"pm.test(\"Status code is 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PATCH",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "default"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"type\": \"Property\", \"object\": \"urn:1\"}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}/attrs/intproperty",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}",
																"attrs",
																"intproperty"
															]
														}
													},
													"response": []
												},
												{
													"name": "Validate no change in entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var expected = pm.collectionVariables.get(\"created\");\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"pm.test(\"Validate content\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    console.log(\"Expected: \" + expected);\r",
																	"    console.log(\"Received: \" + jsonData);\r",
																	"    pm.expect(jsonData).to.eql(expected);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{query-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{query-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Entity",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	"pm.collectionVariables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{entity-manager}}/ngsi-ld/v1/entities/{{entityId}}",
															"host": [
																"{{entity-manager}}"
															],
															"path": [
																"ngsi-ld",
																"v1",
																"entities",
																"{{entityId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	]
}